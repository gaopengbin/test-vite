{"version":3,"file":"webgis-ol.js","sources":["../../../src/ol/style/Style-fn.ts","../../../src/ol/style/Text-fn.ts","../../../src/ol/utils/object.ts","../../../src/base/enums.ts","../../../src/decorators/component.ts","../../../src/utils/tools.ts","../../../src/base/base-widget.ts","../../../src/base/base-map.ts","../../../src/ol/widgets/map/map.ts","../../../src/ol/widgets/zoom-widget/zoom-widget.ts","../../../src/ol/widgets/layer-list/layer-list.ts","../../../src/ol/widgets/basemap-list/basemap-list.ts","../../../src/ol/widgets/coordinate/coordinate.html?raw","../../../src/ol/widgets/coordinate/coordinate.ts","../../../src/ol/widgets/hello-world/hello-world.html?raw","../../../src/ol/widgets/hello-world/hello-world.ts","../../../src/ol/widgets/map-test/map-test.ts"],"sourcesContent":["import Feature from \"ol/Feature\";\r\nimport Style from \"ol/style/Style\";\r\nimport { TextFn } from \"./Text-fn\";\r\n/**\r\n * 以函数形式存在的样式\r\n */\r\nexport class StyleFn {\r\n    /**\r\n     * 获取样式的函数，主要用于创建需要动态获取属性的样式\r\n     * @param config 相关配置信息\r\n     * @returns\r\n     */\r\n    constructor(config: any) {\r\n        const _config = Object.assign({}, config);\r\n        const style = new Style(_config);\r\n        return (feature: Feature) => {\r\n            // 字体\r\n            const text = style.getText() as TextFn;\r\n            text.setFeature && text.setFeature(feature);\r\n            return style;\r\n        }\r\n    }\r\n}","import Text from \"ol/style/Text\";\r\nimport Feature from \"ol/Feature\";\r\n\r\n\r\n\r\nexport class TextFn extends Text {\r\n    /** 当前样式对应的feature */\r\n    #feature?: Feature;\r\n    // 原始内容\r\n    #text: string | string[];\r\n\r\n    constructor(options: any) {\r\n        super(options);\r\n        this.#text = options.text;\r\n    }\r\n\r\n    /**\r\n     * 设置feature\r\n     * @param {Feature} feature\r\n     */\r\n    setFeature(feature: Feature) {\r\n        this.#feature = feature;\r\n    }\r\n\r\n    /**\r\n     * 重写获取文字值的方法\r\n     * 如果text是数组，需要注意写法，应该是一行文字，一行样式，如果没有样式，要写一个空行，如：\r\n     *                  [\r\n                            \"张三\",\r\n                            \"bold 13px Calibri,sans-serif\",\r\n                            \"\\n\",\r\n                            \"\",  这个代表回车的样式\r\n                            \"李四\",\r\n                            \"italic 11px Calibri,sans-serif\"\r\n                        ]\r\n     * @returns \r\n     */\r\n    getText() {\r\n        try {\r\n            let text;\r\n            // 判断是数组还是数组字符串\r\n            if (Array.isArray(this.#text)) {\r\n                text = this.#text.map(item => {\r\n                    return this.#getCurrentValue(item);\r\n                });\r\n            }\r\n            else {\r\n                text = this.#getCurrentValue(this.#text);\r\n            }\r\n            return text;\r\n        } catch (error) {\r\n            console.error(error);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取当前指定的属性值\r\n     * @param {string} template \r\n     * @returns \r\n     */\r\n    #getCurrentValue(template: string) {\r\n        // 获取 {key} 对应的值\r\n        return template.replace(/\\{(.+?)\\}/g, (...args) => {\r\n            return this.#feature?.get(args[1]);\r\n        });\r\n    }\r\n}\r\n","// 导入所需的构造函数\r\nimport { Map, View } from \"ol\";\r\nimport Projection from \"ol/proj/Projection\";\r\nimport * as _Layer from \"ol/layer\";\r\nimport * as _Source from \"ol/source\";\r\nimport * as _Format from 'ol/format';\r\nimport * as _Style from 'ol/style.js';\r\nimport { defaults } from 'ol/control/defaults';\r\nimport { StyleFn } from \"../style/Style-fn\";\r\nimport { TextFn } from \"../style/Text-fn\";\r\n\r\n/** 构造函数映射 */\r\nconst Objects: any = {\r\n    // 地图\r\n    map: Map,\r\n    view: View,\r\n    // 投影\r\n    projection: Projection,\r\n    // 默认控件\r\n    defaults: defaults,\r\n    // 图层\r\n    graticule: _Layer.Graticule,\r\n    group: _Layer.Group,\r\n    heatmap: _Layer.Heatmap,\r\n    image: _Layer.Image,\r\n    layer: _Layer.Layer,\r\n    mapboxvector: _Layer.MapboxVector,\r\n    tile: _Layer.Tile,\r\n    vector: _Layer.Vector,\r\n    vectorimage: _Layer.VectorImage,\r\n    vectortile: _Layer.VectorTile,\r\n    webglpoints: _Layer.WebGLPoints,\r\n    webgltile: _Layer.WebGLTile,\r\n    // 数据源\r\n    'bingmaps-source': _Source.BingMaps,\r\n    'cartodb-source': _Source.CartoDB,\r\n    'cluster-source': _Source.Cluster,\r\n    'datatile-source': _Source.DataTile,\r\n    'geotiff-source': _Source.GeoTIFF,\r\n    'iiif-source': _Source.IIIF,\r\n    // imagesource-source': _Source.Image, 基类 // 防止与图层的配置重复\r\n    'imagearcgisrest-source': _Source.ImageArcGISRest,\r\n    'imagecanvas-source': _Source.ImageCanvas,\r\n    'imagemapguide-source': _Source.ImageMapGuide,\r\n    'imagestatic-source': _Source.ImageStatic,\r\n    'imagewms-source': _Source.ImageWMS,\r\n    'osm-source': _Source.OSM,\r\n    'raster-source': _Source.Raster,\r\n    // source-source': _Source.Source, 基类\r\n    'stamen-source': _Source.Stamen,\r\n    // 'tile-source'-source': _Source.Tile, 基类 // 防止与图层的配置重复\r\n    'tilearcgisrest-source': _Source.TileArcGISRest,\r\n    'tiledebug-source': _Source.TileDebug,\r\n    'tileimage-source': _Source.TileImage,\r\n    'tilejson-source': _Source.TileJSON,\r\n    'tilewms-source': _Source.TileWMS,\r\n    'urltile-source': _Source.UrlTile,\r\n    'utfgrid-source': _Source.UTFGrid,\r\n    'vector-source': _Source.Vector, // 防止与图层的配置重复\r\n    'vectortile-source': _Source.VectorTile, // 防止与图层的配置重复\r\n    'wmts-source': _Source.WMTS,\r\n    'xyz-source': _Source.XYZ,\r\n    'zoomify-source': _Source.Zoomify,\r\n    // 要素格式方式\r\n    esrijson: _Format.EsriJSON,\r\n    geojson: _Format.GeoJSON,\r\n    gml: _Format.GML,\r\n    gpx: _Format.GPX,\r\n    igc: _Format.IGC,\r\n    iiifinfo: _Format.IIIFInfo,\r\n    kml: _Format.KML,\r\n    mvt: _Format.MVT,\r\n    ows: _Format.OWS,\r\n    polyline: _Format.Polyline,\r\n    topojson: _Format.TopoJSON,\r\n    wfs: _Format.WFS,\r\n    wkb: _Format.WKB,\r\n    wkt: _Format.WKT,\r\n    wmscapabilities: _Format.WMSCapabilities,\r\n    wmsgetfeatureinfo: _Format.WMSGetFeatureInfo,\r\n    wmtscapabilities: _Format.WMTSCapabilities,\r\n    // 样式\r\n    circle: _Style.Circle,\r\n    fill: _Style.Fill,\r\n    icon: _Style.Icon,\r\n    iconimage: _Style.IconImage,\r\n    // 'image-style': _Style.Image, 基类 // 防止与图层的配置重复\r\n    regularshape: _Style.RegularShape,\r\n    stroke: _Style.Stroke,\r\n    style: _Style.Style,\r\n    text: _Style.Text,\r\n    'style-fn': StyleFn,\r\n    'text-fn': TextFn\r\n}\r\n\r\n/**\r\n * 根据配置文件获取对象\r\n * @param config 相关配置信息\r\n * @param {string} [type] 使用什么类型的原型进行实例化。\r\n *                        优先从config里面获取type，如果没有则使用传入的type\r\n * @returns 根据配置信息构造成的对象\r\n */\r\nexport const getObject = (config: any, type?: string) => {\r\n    // 类型检查 只有数组和对象才能被实例化\r\n    if (config === null || typeof config !== 'object') {\r\n        return config;\r\n    }\r\n    // 拷贝配置信息\r\n    // const _config = Object.assign(config);\r\n    const _config = JSON.parse(JSON.stringify(config)); // 需要深拷贝\r\n    try {\r\n        // 先判断config是否为数组\r\n        if (Array.isArray(_config)) {\r\n            for (let i = 0; i < _config.length; i++) {\r\n                _config[i] = getObject(_config[i]);\r\n            }\r\n            return _config;\r\n        }\r\n        // 如果是对象\r\n        // 遍历节点，递归构造对象\r\n        Object.keys(_config).forEach(key => {\r\n            _config[key] = getObject(_config[key], key);\r\n        });\r\n\r\n        // 优先从配置信息里面获取type，如果没有则使用传入的类型\r\n        type = _config.type || type;\r\n        // 获取构造函数\r\n        const constructor = getConstructor(type);\r\n        if (!constructor) {\r\n            throw new Error(`Cannot find a constructor of type ${type}`);\r\n        }\r\n        return new (constructor as any)(_config);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        return _config;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 根据类型获取相应的构造函数\r\n * @param {string | undefined} type 类型\r\n * @returns 构造函数\r\n */\r\nexport const getConstructor = (type: string | undefined) => {\r\n    if (!type) {\r\n        return;\r\n    }\r\n    return Objects[type.toLowerCase()];\r\n}\r\n","/**\r\n * 组件模式枚举\r\n * none 不启用任何功能 | funOnly 只启用函数 | propOnly 只启用属性 | always 总是启用\r\n */\r\nexport enum Mode {\r\n    /** 不启用任何功能 */\r\n    none,\r\n    /** 只启用函数 */\r\n    funOnly,\r\n    /** 只启用属性 */\r\n    propOnly,\r\n    /** 总是启用 */\r\n    always\r\n}","import { Mode } from \"../base/enums\";\r\n\r\n/**\r\n * 组件的创建参数\r\n */\r\nexport interface Manifest {\r\n    /**\r\n     * 标签的名称\r\n     */\r\n    tagName: string;\r\n    /**\r\n     * css类名，默认和tagName一致\r\n     */\r\n    className?: string;\r\n    /**\r\n     * html模板\r\n     */\r\n    template?: string;\r\n    /**\r\n     * 是否有config，默认为否\r\n     */\r\n    hasConfig?: boolean;\r\n    /**\r\n     * 模式\r\n     * 不启用 | 只启用函数 | 只启用属性 | 总是启用\r\n     * 默认值为always\r\n     */\r\n    mode?: Mode\r\n}\r\n\r\n\r\n/**\r\n * 组件装饰器\r\n * @param {Manifest} manifest 装饰器的参数\r\n * @returns {any} Target object.\r\n */\r\nexport const Component = (manifest: Manifest): any => {\r\n    return (target: any) => {\r\n        target.prototype._manifest = getManifest(manifest);\r\n        // 创建标签\r\n        customElements.define(manifest.tagName, target as CustomElementConstructor);\r\n        return target as any;\r\n    };\r\n}\r\n\r\n/**\r\n * 给装饰器参数添加默认值\r\n * @param manifest 装饰器参数\r\n * @returns 添加默认值之后的装饰器参数\r\n */\r\nconst getManifest = (manifest: Manifest): Manifest => {\r\n    // 合成manifest，添加默认参数\r\n    manifest = Object.assign({\r\n        hasConfig: false,\r\n        mode: Mode.always\r\n    }, manifest);\r\n\r\n    return manifest;\r\n}","/**\r\n * 立即执行 主要用于防抖\r\n * 将指定函数放到队列中\r\n * @param {Function} callback \r\n */\r\nexport const timerFunc = (callback: any) => {\r\n    if (Promise) {\r\n        Promise.resolve().then(callback)\r\n    }\r\n    // 使用动画执行\r\n    else if (requestAnimationFrame) {\r\n        requestAnimationFrame(callback);\r\n    }\r\n    else {\r\n        /**\r\n         * 使用setTimeout 可能会出现延迟\r\n         */\r\n        setTimeout(callback, 0);\r\n    }\r\n}","import { Manifest } from \"../decorators/component\";\r\nimport { Mode } from \"./enums\";\r\nimport { timerFunc } from \"../utils/tools\";\r\n\r\n\r\n/**\r\n * 初始化必要的参数\r\n */\r\ninterface StartInfo {\r\n    mapView: BaseWidget;\r\n    map: any;\r\n    config: object;\r\n    mapConfig: object;\r\n}\r\n\r\n\r\n/**\r\n * 组件原型\r\n */\r\nexport default class BaseWidget extends HTMLElement {\r\n    [x: string]: any; // 任意的string索引List\r\n    // 一些私有属性\r\n    #mapConfig?: object;\r\n    #mapView?: BaseWidget;\r\n    #map: any;\r\n    #config?: object;\r\n    #loading?: boolean;\r\n    #data: any;\r\n    #labelTag = 'w-l'; // label标签的名称\r\n    #rendered: boolean = false;// 渲染是否完成\r\n    #mode: Mode; //组件模式\r\n\r\n    constructor() {\r\n        super();\r\n        // 加载配置文件\r\n        if (this.manifest.hasConfig) {\r\n            this.#loadConfig(this.getAttribute('config') || this.getAttribute('configUrl'));\r\n        }\r\n\r\n        this.#mode = this.manifest.mode ?? Mode.always;\r\n        /**\r\n         * 防止出现如下错误：\r\n         *     Failed to construct 'CustomElement': The result must not have attributes\r\n         */\r\n        timerFunc(() => {\r\n            this.#initDom();\r\n            this.#onInit();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 手动启动初始化的方法\r\n     * @param args 初始化的必要参数\r\n     */\r\n    public startup(args: StartInfo) {\r\n        this.mapView = args.mapView;\r\n        this.map = args.map;\r\n        this.mapConfig = args.mapConfig;\r\n        this.config = args.config;\r\n    }\r\n\r\n    /**\r\n     * 组件的创建参数\r\n     */\r\n    public get manifest(): Manifest {\r\n        return this._manifest as Manifest;\r\n    }\r\n\r\n    /**\r\n     * 当前组件所在地图的配置 类似于之前的appConfig\r\n     */\r\n    public get mapConfig(): any {\r\n        return this.#mapConfig;\r\n    }\r\n    public set mapConfig(value: any) {\r\n        // mapConfig只设置一次，设置完调用组件初始化方法 #onInit\r\n        if (!this.#mapConfig && value) {\r\n            this.#mapConfig = value;\r\n            this.#onInit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 组件所在地图的原型，如果组件本身为地图，则指向自身\r\n     */\r\n    public get mapView(): BaseWidget {\r\n        return this.#mapView as BaseWidget;\r\n    }\r\n    public set mapView(value: BaseWidget) {\r\n        // mapView只设置一次，设置完调用组件初始化方法 #onInit\r\n        if (!this.#mapView && value) {\r\n            this.#mapView = value;\r\n            this.#onInit();\r\n        }\r\n    }\r\n\r\n    /**\r\n      * 当前组件所在地图\r\n      */\r\n    public get map() {\r\n        return this.#map;\r\n    }\r\n    public set map(value: any) {\r\n        // map只设置一次，设置完调用组件初始化方法 #onInit\r\n        if (!this.#map && value) {\r\n            this.#map = value;\r\n            this.#onInit();\r\n        }\r\n    }\r\n\r\n    /**\r\n      * 当前组件的配置\r\n      */\r\n    public get config(): any {\r\n        return this.#config;\r\n    }\r\n    public set config(value: object) {\r\n        // 当config设置为string时，认为其是url\r\n        if (typeof value === 'string') {\r\n            this.#loadConfig(value);\r\n            return;\r\n        }\r\n        // 当config设置为object时，认为其是配置\r\n        else if (typeof value === 'object') {\r\n            // config只设置一次，设置完调用组件初始化方法 #onInit\r\n            if (!this.#config && value) {\r\n                this.#config = value;\r\n                this.#onInit();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载config\r\n     * 当config不存在时，从文件加载config\r\n     */\r\n    async #loadConfig(configUrl: string | null) {\r\n        // 绑定config\r\n        if (!this.config && configUrl) {\r\n            this.loading = true;\r\n            const response = await fetch(configUrl);\r\n            this.config = response && response.ok && await response.json() || {};\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载中\r\n     */\r\n    public get loading(): boolean {\r\n        return !!this.#loading;\r\n    }\r\n    public set loading(value: boolean) {\r\n        this.#loading = value;\r\n        this.#onLoading();\r\n    }\r\n\r\n    /**\r\n     * loading状态改变\r\n     */\r\n    #onLoading() {\r\n        if (this.loading) {\r\n            this.classList.add('loading');\r\n        }\r\n        else {\r\n            this.classList.remove('loading');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化方法，用于初始化Dom\r\n     */\r\n    #initDom() {\r\n        // 添加样式\r\n        const className = this.manifest.className || this.manifest.tagName;\r\n        this.classList.add(className);\r\n\r\n        // 加载dom内容\r\n        // 要实现事件绑定 双大括号绑定属性\r\n        if (this.manifest.template) {\r\n            let template = this.manifest.template;\r\n\r\n            if ((this.#mode & Mode.propOnly) == Mode.propOnly) { // 二进制比较 判断是否需要属性绑定\r\n                // 获取需要绑定的属性\r\n                // 同时将 {{}} 替换成 #labelTag以便实现局部更新\r\n                template = template.replace(/\\{\\{(.+?)\\}\\}/g, (...args) => {\r\n                    return `<${this.#labelTag}>${args[1]}</${this.#labelTag}>`;\r\n                });\r\n            }\r\n\r\n            this.innerHTML = template;\r\n\r\n            if ((this.#mode & Mode.funOnly) == Mode.funOnly) { // 二进制比较 判断是否需要函数绑定\r\n                this.#bindRoot();\r\n            }\r\n        }\r\n\r\n        // 渲染完成\r\n        this.#rendered = true;\r\n    }\r\n\r\n    /**\r\n     * 用于渲染html的数据\r\n     */\r\n    public get $data(): any {\r\n        return this.#data;\r\n    }\r\n    public set $data(value: any) {\r\n        if ((this.#mode & Mode.propOnly) == Mode.propOnly) { // 二进制比较 判断是否需要属性绑定\r\n            this.#data = this.#defineReactive(value);\r\n            this.#refresh();\r\n        }\r\n        else {\r\n            this.#data = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 对象劫持\r\n     * @param {any} value \r\n     * @returns {any}\r\n     */\r\n    #defineReactive(value: any): any {\r\n        if (typeof value === 'object') {\r\n            Object.keys(value).forEach((key) => {\r\n                value[key] = this.#defineReactive(value[key]);\r\n            });\r\n            return new Proxy(value, {\r\n                set: (obj, p, val) => {\r\n                    // 重新劫持\r\n                    obj[p] = this.#defineReactive(val);\r\n                    // 刷新\r\n                    // this.#refresh();\r\n                    this.#delayRefresh();\r\n                    return true;\r\n                },\r\n                // get: (obj, p) => {\r\n                //     // 判断是否需要刷新dom\r\n                //     return obj[p];\r\n                // },\r\n            });\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    #refreshing: boolean = false;\r\n    /**\r\n     * 延迟执行刷新 防抖 \r\n     * 主要是防止数组的length也会触发刷新\r\n     * @returns \r\n     */\r\n    #delayRefresh() {\r\n        if (this.#refreshing) {\r\n            return;\r\n        }\r\n        this.#refreshing = true;\r\n        timerFunc(() => {\r\n            this.#refresh();\r\n            this.#refreshing = false;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 刷新所有 #labelTag 标签内容\r\n     * {{}}已经被 #labelTag 标签替换\r\n     */\r\n    #refresh() {\r\n        // 绑定属性\r\n        const atts = ['s-value', 's-src'];\r\n        atts.forEach(att => {\r\n            this.#bindAtt(att);\r\n        })\r\n\r\n        // 更新dom\r\n        const labels: any = this.querySelectorAll(this.#labelTag);\r\n        labels.forEach((label: any) => {\r\n            // 获取属性\r\n            const value = this.#getValue(label.origin);\r\n            // 判断属性是否变化，变化则更新\r\n            if (String(value) !== label.innerHTML) {\r\n                label.innerHTML = value;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 绑定属性\r\n     * @param att 需要绑定的属性 如s-value\r\n     */\r\n    #bindAtt(att: string) {\r\n        const nodes: any = this.querySelectorAll(`[${att}]`);\r\n        nodes.forEach((element: any) => {\r\n            // 获取属性\r\n            const key = element.getAttribute(att);\r\n            const _att = att.replace('s-', ''); // 真实属性\r\n            const value = this.#getValue(key);\r\n            // 判断属性是否变化，变化则更新\r\n            if (value !== element[_att]) {\r\n                element[_att] = value;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取指定属性值\r\n     * @param {string} origin 需要获取的属性 如a.b\r\n     * @returns 对应属性的值\r\n     */\r\n    #getValue(origin: string) {\r\n        try {\r\n            return origin.split('.').reduce((data: any, val: string) => {\r\n                return data[val];\r\n            }, this.$data);\r\n        } catch (error) {\r\n            console.error(error);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置$data中的属性\r\n     * @param key \r\n     * @param value \r\n     */\r\n    #setValue(key: string, value: any) {\r\n        let data = this.$data;\r\n        let array = key.split('.');\r\n        for (let i = 0; i < array.length; i++) {\r\n            const k = array[i];\r\n            if (i == array.length - 1) {\r\n                data[k] = value;\r\n            }\r\n            else {\r\n                data = data[k];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 给dom绑定$this，指向当前组件\r\n     */\r\n    #bindRoot() {\r\n        // 这个方法比递归更快\r\n        const list = this.querySelectorAll('*');\r\n        list.forEach((element: any) => {\r\n            if (!element.$this) {\r\n                element.$this = this; //绑定this\r\n                element.$set = (key: string, value: any) => {\r\n                    this.#setValue(key, value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 组件初始化状态，设置多个用于防抖\r\n     * unInited 未初始化\r\n     * initing 正在初始化\r\n     * inited 已经初始化\r\n     */\r\n    #state: 'unInited' | 'initing' | 'inited' = \"unInited\";\r\n    /**\r\n     * 组件初始化方法，只初始化一次\r\n     * 需要判断所有必要条件添加完成再进行初始化\r\n     */\r\n    async #onInit() {\r\n        if (!this.#rendered) { // 尚未渲染完成\r\n            return;\r\n        }\r\n\r\n        if (this.#state === 'initing' || this.#state === 'inited') {\r\n            return;\r\n        }\r\n\r\n        if (this.isReady()) {\r\n            this.#state = 'initing';\r\n            this.loading = true;\r\n            await this.onInit();\r\n            this.loading = false;\r\n            this.#state = 'inited';\r\n            this.afterInit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否可以开始初始化，该方法可以被重写\r\n     * @returns 是否可以开始初始化\r\n     */\r\n    public isReady(): boolean {\r\n        return !!(this.map && this.mapView && this.mapConfig && (this.config || !this.manifest.hasConfig));\r\n    }\r\n\r\n    /**\r\n     * 组件初始化方法\r\n     */\r\n    async onInit() { }\r\n\r\n    /**\r\n     * 初始化完成之后调用的方法，该方法可以被重写\r\n     */\r\n    afterInit() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 当组件被打开\r\n     */\r\n    onOpen() { }\r\n\r\n    /**\r\n     * 当组件被关闭\r\n     */\r\n    onClose() { }\r\n\r\n\r\n}","import BaseWidget from \"./base-widget\";\r\n\r\n/**\r\n * 地图组件原型\r\n */\r\nexport default class BaseMapWidget extends BaseWidget {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * 重写基类的isReady方法\r\n     * 地图只需要加载config就可以初始化了\r\n     * @returns 是否可以开始初始化\r\n     */\r\n    public isReady(): boolean {\r\n        return !!this.config;\r\n    }\r\n\r\n    /**\r\n     * 加载该map的其他组件\r\n     */\r\n    afterInit() {\r\n        // 当前地图的config即为当前地图的mapConfig\r\n        this.mapConfig = this.config;\r\n        this.mapView = this;\r\n\r\n        /**\r\n         * 需要使用的组件管理器的名字\r\n         * 只有map组件需要设置该项\r\n         * 默认值为 webgis-widget-manager\r\n         */\r\n        const _widgetManager = this.mapConfig.widgetManager || 'webgis-widget-manager';\r\n\r\n        // 创建组件管理器\r\n        const widgetManager = document.createElement(_widgetManager) as BaseWidget;\r\n\r\n        // 添加必要参数\r\n        /**\r\n         *      下面这种写法和直接调用startup效果是一样的\r\n                widgetManager.mapView = this;\r\n                widgetManager.config = this.mapConfig.widgets;\r\n                widgetManager.map = this.map;\r\n                widgetManager.mapConfig = this.mapConfig;\r\n         */\r\n\r\n        widgetManager.startup({\r\n            mapView: this,\r\n            map: this.map,\r\n            config: this.mapConfig.widgets,\r\n            mapConfig: this.mapConfig\r\n        })\r\n\r\n        // 渲染组件\r\n        // this.appendChild(widgetManager);\r\n        this.childNodes[0] ? this.insertBefore(widgetManager, this.childNodes[0]) : this.appendChild(widgetManager);\r\n    }\r\n\r\n}","import { Map } from \"ol\";\r\n\r\nimport { Component } from \"../../../decorators/component\";\r\nimport BaseMapWidget from \"../../../base/base-map\";\r\nimport { getObject } from \"../../utils\";\r\n\r\n// 组件的样式\r\nimport './map.scss';\r\n\r\n\r\n@Component({\r\n    tagName: 'ol-map',\r\n    className: 'ol-map',\r\n    hasConfig: true\r\n})\r\nexport class MapView extends BaseMapWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        const map: Map = getObject(this.config.map, 'map');\r\n        map.setTarget(this);// 地图容器 对应id 或组件\r\n        this.map = map;\r\n    }\r\n}\r\n","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\nimport Zoom from 'ol/control/Zoom';\r\n// 组件的样式\r\nimport './zoom-widget.scss';\r\n\r\n@Component({\r\n    tagName: 'ol-zoom-widget',\r\n    className: 'ol-zoom-widget'\r\n})\r\nexport class ZoomWidget extends BaseWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        let zoom = new Zoom({\r\n            target: this\r\n        });\r\n        this.map.addControl(zoom);\r\n    }\r\n}","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\nimport LayerShop from 'ol-ext/control/LayerShop';\r\n\r\n// 组件的样式\r\nimport './layer-list.scss';\r\n\r\n@Component({\r\n    tagName: 'ol-layer-list',\r\n    className: 'ol-layer-list'\r\n})\r\nexport class LayerList extends BaseWidget {\r\n    #layerIds: any[] = [];//记录打开透明度滑条的图层id\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        let layerShop = new LayerShop({\r\n            target: this,\r\n            noScroll: true,\r\n            collapsed: false,\r\n            trash: false,\r\n            extent: true as any,// ol-ext插件的类型写错了\r\n            show_progress: false,\r\n            // 判断需要展示的图层\r\n            displayInLayerSwitcher: (layer: any) => {\r\n                return layer.values_.listMode !== 'hide';\r\n            }\r\n        });\r\n        // 添加按钮\r\n        layerShop.on('drawlist', (e) => {\r\n            const li = e.li as HTMLElement;\r\n            const buttons = li.getElementsByClassName('ol-layerswitcher-buttons')[0];\r\n            const opacityBar = li.getElementsByClassName('layerswitcher-opacity')[0] as HTMLElement;\r\n            let div = document.createElement('div');\r\n            div.title = '透明度';\r\n            div.innerHTML = '\\u0025';\r\n\r\n            // 记录透明度滑条的状态\r\n            const layer: any = e.layer;\r\n            opacityBar.style.display = this.#layerIds.includes(layer.ol_uid) ? 'block' : 'none';\r\n\r\n            div.onclick = () => {\r\n                let display = opacityBar.style.display;\r\n                if (display === 'block') {\r\n                    opacityBar.style.display = 'none';\r\n                    this.#layerIds = this.#layerIds.filter(item => {\r\n                        return item !== layer.ol_uid;\r\n                    });\r\n                }\r\n                else {\r\n                    opacityBar.style.display = 'block';\r\n                    this.#layerIds.push(layer.ol_uid);\r\n                }\r\n            }\r\n            buttons.appendChild(div);\r\n        });\r\n        this.map.addControl(layerShop);\r\n    }\r\n}","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\nimport LayerSwitcher from 'ol-ext/control/LayerSwitcher';\r\n\r\n// 组件的样式\r\nimport './basemap-list.scss';\r\n\r\n@Component({\r\n    tagName: 'ol-basemap-list',\r\n    className: 'ol-basemap-list'\r\n})\r\nexport class BasemapList extends BaseWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        let control = new LayerSwitcherImage({\r\n            target: this\r\n        });\r\n        this.map.addControl(control);\r\n    }\r\n}\r\n\r\n// 底图管理器\r\nclass LayerSwitcherImage extends LayerSwitcher {\r\n    constructor(options: any) {\r\n        options = options || {};\r\n        options.switcherClass = ((options.switcherClass || '') + ' ol-layerswitcher-image').trim();\r\n        options.mouseover = (options.mouseover !== false);\r\n        super(options);\r\n    }\r\n\r\n    drawList(ul: any, layers: any) {\r\n        ul.style.height = 'auto';\r\n        // 获取底图图层\r\n        const basemaps = layers.array_.filter((item: any) => {\r\n            return item.values_.isBasemap;\r\n        });\r\n\r\n        basemaps.forEach((layer: any) => {\r\n            if (this.displayInLayerSwitcher(layer)) {\r\n                // 缩略图\r\n                let img = document.createElement('img');\r\n                img.src = layer.values_.thumbnail || 'images/thumbnail.png';\r\n                // 标题\r\n                let title = document.createElement('p');\r\n                title.innerHTML = layer.get(\"title\") || layer.get(\"name\");\r\n\r\n                let li = document.createElement('li');\r\n                li.className = 'ol-imgcontainer' + (layer.getVisible() ? ' ol-visible' : '');\r\n                li.appendChild(img);\r\n                li.appendChild(title);\r\n                // 点击事件\r\n                li.onclick = () => {\r\n                    (this as any).switchLayerVisibility(layer, layers);\r\n                };\r\n                (this as any)._setLayerForLI(li, layer);\r\n                if (!(this as any).testLayerVisibility(layer)) {\r\n                    li.classList.add('ol-layer-hidden');\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        });\r\n    }\r\n    /** Disable overflow\r\n    */\r\n    overflow() { }\r\n}","export default \"<div>{{coordinate}} 比例尺 {{scale}}</div>\"","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\nimport { listen } from 'ol/events';\r\n\r\n// 组件的样式\r\nimport './coordinate.scss';\r\n// 组件的模板\r\nimport template from './coordinate.html?raw';\r\n\r\n\r\n\r\n@Component({\r\n    tagName: 'ol-coordinate',\r\n    className: 'ol-coordinate',\r\n    template: template\r\n})\r\nexport class Coordinate extends BaseWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        this.$data = {\r\n            coordinate: '',\r\n            scale: ''\r\n        };\r\n        const viewport = this.map.getViewport();\r\n        listen(viewport, 'pointermove', this.handleMouseMove, this);\r\n        this.map.on('moveend', this.moveEnd.bind(this));\r\n    }\r\n\r\n    // 鼠标移动\r\n    handleMouseMove(event: any) {\r\n        const pixel = this.map.getEventPixel(event);\r\n        const coordinate = this.map.getCoordinateFromPixelInternal(pixel);\r\n        if (coordinate) {\r\n            this.$data.coordinate = `${coordinate[0].toFixed(3)} ${coordinate[1].toFixed(3)}`;\r\n        }\r\n    }\r\n\r\n    // 比例尺变化\r\n    moveEnd() {\r\n        const scale = this.getScale();\r\n        if (scale ?? false) {\r\n            this.$data.scale = `1:${scale.toLocaleString()}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取比例尺\r\n     * @return {number} 比例尺.\r\n     */\r\n    getScale(): number {\r\n        const view = this.map.getView();\r\n        //默认dpi\r\n        const DEFAULT_DPI = 25.4 / 0.28;\r\n        //每米多少英寸\r\n        const inchesPerMeter = 1000 / 25.4;\r\n        var currentScale = 1;\r\n        //如果是度分秒的话需要转换为米\r\n        if (view.getProjection().getUnits() != 'metric') {\r\n            currentScale = view.getResolution() * view.getProjection().getMetersPerUnit() * inchesPerMeter * DEFAULT_DPI;\r\n        } else {\r\n            currentScale = view.getResolution() * inchesPerMeter * DEFAULT_DPI;\r\n        }\r\n\r\n        return Math.round(currentScale);\r\n    }\r\n}","export default \"<fieldset>\\r\\n    <legend>\\r\\n        数据解析\\r\\n    </legend>\\r\\n    <div>\\r\\n        <button onclick=\\\"$this.add(event)\\\">测试加一</button>\\r\\n        结果：{{a}}\\r\\n    </div>\\r\\n\\r\\n    <div>\\r\\n        <button onclick=\\\"$this.changeName(event)\\\">测试人名</button>\\r\\n        你是：{{b}}\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div>\\r\\n        <button onclick=\\\"$this.changeValue(event)\\\">测试多重属性</button>\\r\\n        c.d.e : {{c.d.e}}\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div>\\r\\n        <button onclick=\\\"$this.changeArr(event)\\\">测试数组</button>\\r\\n        数组长度：{{f.length}}\\r\\n    </div>\\r\\n</fieldset>\\r\\n\\r\\n\\r\\n<fieldset>\\r\\n    <legend>\\r\\n        事件数据绑定\\r\\n    </legend>\\r\\n    <div>\\r\\n        <input oninput=\\\"$this.$data.aa=value\\\">\\r\\n        <br>\\r\\n        结果：{{aa}}\\r\\n    </div>\\r\\n</fieldset>\\r\\n\\r\\n<fieldset>\\r\\n    <legend>\\r\\n        属性绑定 + 直接赋值\\r\\n    </legend>\\r\\n    <div>\\r\\n        <input s-value=\\\"bb\\\" oninput=\\\"$this.$data.bb=value\\\">\\r\\n        <br>\\r\\n        结果：{{bb}}\\r\\n    </div>\\r\\n</fieldset>\\r\\n\\r\\n<fieldset>\\r\\n    <legend>\\r\\n        属性绑定 + 绑定赋值\\r\\n    </legend>\\r\\n    <div>\\r\\n        <input s-value=\\\"cc\\\" oninput=\\\"$set('cc',value)\\\">\\r\\n        <!-- <input s-value=\\\"cc\\\" oninput=\\\"console.log(this)\\\"> -->\\r\\n        <br>\\r\\n        结果：{{cc}}\\r\\n    </div>\\r\\n</fieldset>\"","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\n\r\n\r\n// 组件的样式\r\nimport './hello-world.scss';\r\n// 组件的模板\r\nimport template from './hello-world.html?raw';\r\n// import { Mode } from \"../../base/enums\";\r\n\r\n\r\n@Component({\r\n    tagName: 'ol-hello-world',\r\n    className: 'ol-hello-world',\r\n    template: template,\r\n    // mode: Mode.none\r\n})\r\nexport class HelloWorld extends BaseWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        this.$data = {\r\n            a: 1,\r\n            b: \"张三\",\r\n            c: {\r\n                d: {\r\n                    e: 1\r\n                }\r\n            },\r\n            f: [1],\r\n            aa: '123',\r\n            bb: 'start',\r\n            cc: '121'\r\n        }\r\n        // this.$data = [1, 2]\r\n\r\n    }\r\n\r\n    hello(event: any) {\r\n        console.log(event)\r\n        // alert('hello-world')\r\n        // this.$data.a = 2222;\r\n        // this.$data.c = {\r\n        //     d: \"张三\"\r\n        // }\r\n        this.$data.c.d = \"和了了了了了了\"\r\n    }\r\n\r\n    changeName() {\r\n        this.$data.b = this.$data.b == '张三' ? '李四' : '张三';\r\n    }\r\n\r\n    changeValue() {\r\n        // this.$data.c.d.e = Math.random();\r\n        this.$data.c.d = {\r\n            // e: parseInt(String(Math.random() * 10))\r\n            e: this.$data.c.d.e + 1\r\n        }\r\n    }\r\n\r\n    changeArr() {\r\n        this.$data.f.push(1);\r\n    }\r\n\r\n\r\n    add() {\r\n        this.$data.a++;\r\n    }\r\n\r\n    kill() {\r\n        return 'hello';\r\n    }\r\n}","import { Map } from \"ol\";\r\nimport { MousePosition } from 'ol/control';\r\n\r\nimport { Component } from \"../../../decorators/component\";\r\nimport BaseMapWidget from \"../../../base/base-map\";\r\nimport { getObject } from \"../../utils/object\";\r\n\r\n// 组件的样式\r\nimport './map-test.scss';\r\n\r\n@Component({\r\n    tagName: 'ol-map-test',\r\n    className: 'ol-map-test',\r\n    hasConfig: true\r\n})\r\nexport class MapViewTest extends BaseMapWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        const map: Map = getObject(this.config.map, 'map');\r\n        map.setTarget(this);// 地图容器 对应id 或组件\r\n        map.addControl(new MousePosition());\r\n        this.map = map;\r\n\r\n        // const mapConfig = this.config.map;\r\n        // const layers = mapConfig.layers.map((item: any) => {\r\n        //     return getObject(item);\r\n        // });\r\n\r\n        // let vectorTileSource = new VectorTile({\r\n        //     \"url\": \"http://jojo1986.cn:8188/geoserver/gwc/service/tms/1.0.0/SY:ln_village_p@EPSG:3857@pbf/{z}/{x}/{-y}.pbf\",\r\n        //     \"format\": new MVT()\r\n        // });\r\n\r\n        // const clusterSource = new Cluster({\r\n        //     distance: 40,\r\n        //     source: vectorTileSource,\r\n        //     geometryFunction: function (feature: any) {\r\n        //         return feature.getGeometry().getCoordinates();\r\n        //     },\r\n        //     projection: 'EPSG:3857'\r\n        // });\r\n\r\n        // let aaa = new VectorTileLayer({\r\n        //     \"title\": \"村点\",\r\n        //     \"type\": \"VectorTile\",\r\n        //     \"minZoom\": 12,\r\n        //     \"maxZoom\": 18,\r\n        //     \"source\": clusterSource,\r\n        //     \"style\": getObject({\r\n        //         \"type\": \"style-fn\",\r\n        //         \"image\": {\r\n        //             \"type\": \"Icon\",\r\n        //             \"imgSize\": [\r\n        //                 350,\r\n        //                 360\r\n        //             ],\r\n        //             \"scale\": 0.1,\r\n        //             \"src\": \"styles/a.jpg\"\r\n        //         },\r\n        //         \"text\": {\r\n        //             \"type\": \"Text-fn\",\r\n        //             \"font\": \"12px Calibri,sans-serif\",\r\n        //             \"fill\": {\r\n        //                 \"type\": \"Fill\",\r\n        //                 \"color\": \"#000\"\r\n        //             },\r\n        //             \"stroke\": {\r\n        //                 \"type\": \"Stroke\",\r\n        //                 \"color\": \"#fff\",\r\n        //                 \"width\": 1\r\n        //             },\r\n        //             \"text1\": \"{province_name}{city_name}{county_name}{name}\",\r\n        //             \"textAlign\": \"center\",\r\n        //             \"textBaseline\": \"middle\",\r\n        //             \"offsetY\": 50\r\n        //         }\r\n        //     })\r\n        // })\r\n        // layers.push(aaa);\r\n        // //  创建地图对象\r\n        // this.map = new Map({\r\n        //     target: this, // 地图容器 对应id 或组件\r\n        //     layers: layers,// 图层\r\n        //     view: getObject(mapConfig.view, 'view')\r\n        // }).addControl(new MousePosition());\r\n\r\n    }\r\n}\r\n"],"names":["StyleFn","config","_config","style","Style","feature","text","TextFn","Text","options","__privateAdd","_getCurrentValue","_feature","_text","__privateSet","__privateGet","item","__privateMethod","getCurrentValue_fn","error","template","args","_a","Objects","Map","View","Projection","defaults","_Layer","_Source","_Format","_Style","getObject","type","i","key","constructor","getConstructor","Mode","Mode2","Component","manifest","target","getManifest","timerFunc","callback","BaseWidget","_loadConfig","_onLoading","_initDom","_defineReactive","_delayRefresh","_refresh","_bindAtt","_getValue","_setValue","_bindRoot","_onInit","_mapConfig","_mapView","_map","_loading","_data","_labelTag","_rendered","_mode","_refreshing","_state","loadConfig_fn","initDom_fn","onInit_fn","value","onLoading_fn","defineReactive_fn","refresh_fn","configUrl","response","className","bindRoot_fn","obj","p","val","delayRefresh_fn","att","bindAtt_fn","label","getValue_fn","element","_att","origin","data","setValue_fn","array","k","BaseMapWidget","_widgetManager","widgetManager","MapView","map","__decorateClass","ZoomWidget","zoom","Zoom","LayerList","_layerIds","layerShop","LayerShop","layer","li","buttons","opacityBar","div","BasemapList","control","LayerSwitcherImage","LayerSwitcher","ul","layers","img","title","template$1","Coordinate","viewport","listen","event","pixel","coordinate","scale","view","DEFAULT_DPI","inchesPerMeter","currentScale","HelloWorld","MapViewTest","MousePosition"],"mappings":"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"}