{"version":3,"file":"webgis-ol.umd.cjs","sources":["../../../src/ol/style/Style-fn.ts","../../../src/ol/style/Text-fn.ts","../../../src/ol/utils/object.ts","../../../src/base/enums.ts","../../../src/decorators/component.ts","../../../src/utils/tools.ts","../../../src/base/base-widget.ts","../../../src/base/base-map.ts","../../../src/ol/widgets/map/map.ts","../../../src/ol/widgets/zoom-widget/zoom-widget.ts","../../../src/ol/widgets/layer-list/layer-list.ts","../../../src/ol/widgets/basemap-list/basemap-list.ts","../../../src/ol/widgets/coordinate/coordinate.html?raw","../../../src/ol/widgets/coordinate/coordinate.ts","../../../src/ol/widgets/hello-world/hello-world.html?raw","../../../src/ol/widgets/hello-world/hello-world.ts","../../../src/ol/widgets/map-test/map-test.ts"],"sourcesContent":["import Feature from \"ol/Feature\";\r\nimport Style from \"ol/style/Style\";\r\nimport { TextFn } from \"./Text-fn\";\r\n/**\r\n * 以函数形式存在的样式\r\n */\r\nexport class StyleFn {\r\n    /**\r\n     * 获取样式的函数，主要用于创建需要动态获取属性的样式\r\n     * @param config 相关配置信息\r\n     * @returns\r\n     */\r\n    constructor(config: any) {\r\n        const _config = Object.assign({}, config);\r\n        const style = new Style(_config);\r\n        return (feature: Feature) => {\r\n            // 字体\r\n            const text = style.getText() as TextFn;\r\n            text.setFeature && text.setFeature(feature);\r\n            return style;\r\n        }\r\n    }\r\n}","import Text from \"ol/style/Text\";\r\nimport Feature from \"ol/Feature\";\r\n\r\n\r\n\r\nexport class TextFn extends Text {\r\n    /** 当前样式对应的feature */\r\n    #feature?: Feature;\r\n    // 原始内容\r\n    #text: string | string[];\r\n\r\n    constructor(options: any) {\r\n        super(options);\r\n        this.#text = options.text;\r\n    }\r\n\r\n    /**\r\n     * 设置feature\r\n     * @param {Feature} feature\r\n     */\r\n    setFeature(feature: Feature) {\r\n        this.#feature = feature;\r\n    }\r\n\r\n    /**\r\n     * 重写获取文字值的方法\r\n     * 如果text是数组，需要注意写法，应该是一行文字，一行样式，如果没有样式，要写一个空行，如：\r\n     *                  [\r\n                            \"张三\",\r\n                            \"bold 13px Calibri,sans-serif\",\r\n                            \"\\n\",\r\n                            \"\",  这个代表回车的样式\r\n                            \"李四\",\r\n                            \"italic 11px Calibri,sans-serif\"\r\n                        ]\r\n     * @returns \r\n     */\r\n    getText() {\r\n        try {\r\n            let text;\r\n            // 判断是数组还是数组字符串\r\n            if (Array.isArray(this.#text)) {\r\n                text = this.#text.map(item => {\r\n                    return this.#getCurrentValue(item);\r\n                });\r\n            }\r\n            else {\r\n                text = this.#getCurrentValue(this.#text);\r\n            }\r\n            return text;\r\n        } catch (error) {\r\n            console.error(error);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取当前指定的属性值\r\n     * @param {string} template \r\n     * @returns \r\n     */\r\n    #getCurrentValue(template: string) {\r\n        // 获取 {key} 对应的值\r\n        return template.replace(/\\{(.+?)\\}/g, (...args) => {\r\n            return this.#feature?.get(args[1]);\r\n        });\r\n    }\r\n}\r\n","// 导入所需的构造函数\r\nimport { Map, View } from \"ol\";\r\nimport Projection from \"ol/proj/Projection\";\r\nimport * as _Layer from \"ol/layer\";\r\nimport * as _Source from \"ol/source\";\r\nimport * as _Format from 'ol/format';\r\nimport * as _Style from 'ol/style.js';\r\nimport { defaults } from 'ol/control/defaults';\r\nimport { StyleFn } from \"../style/Style-fn\";\r\nimport { TextFn } from \"../style/Text-fn\";\r\n\r\n/** 构造函数映射 */\r\nconst Objects: any = {\r\n    // 地图\r\n    map: Map,\r\n    view: View,\r\n    // 投影\r\n    projection: Projection,\r\n    // 默认控件\r\n    defaults: defaults,\r\n    // 图层\r\n    graticule: _Layer.Graticule,\r\n    group: _Layer.Group,\r\n    heatmap: _Layer.Heatmap,\r\n    image: _Layer.Image,\r\n    layer: _Layer.Layer,\r\n    mapboxvector: _Layer.MapboxVector,\r\n    tile: _Layer.Tile,\r\n    vector: _Layer.Vector,\r\n    vectorimage: _Layer.VectorImage,\r\n    vectortile: _Layer.VectorTile,\r\n    webglpoints: _Layer.WebGLPoints,\r\n    webgltile: _Layer.WebGLTile,\r\n    // 数据源\r\n    'bingmaps-source': _Source.BingMaps,\r\n    'cartodb-source': _Source.CartoDB,\r\n    'cluster-source': _Source.Cluster,\r\n    'datatile-source': _Source.DataTile,\r\n    'geotiff-source': _Source.GeoTIFF,\r\n    'iiif-source': _Source.IIIF,\r\n    // imagesource-source': _Source.Image, 基类 // 防止与图层的配置重复\r\n    'imagearcgisrest-source': _Source.ImageArcGISRest,\r\n    'imagecanvas-source': _Source.ImageCanvas,\r\n    'imagemapguide-source': _Source.ImageMapGuide,\r\n    'imagestatic-source': _Source.ImageStatic,\r\n    'imagewms-source': _Source.ImageWMS,\r\n    'osm-source': _Source.OSM,\r\n    'raster-source': _Source.Raster,\r\n    // source-source': _Source.Source, 基类\r\n    'stamen-source': _Source.Stamen,\r\n    // 'tile-source'-source': _Source.Tile, 基类 // 防止与图层的配置重复\r\n    'tilearcgisrest-source': _Source.TileArcGISRest,\r\n    'tiledebug-source': _Source.TileDebug,\r\n    'tileimage-source': _Source.TileImage,\r\n    'tilejson-source': _Source.TileJSON,\r\n    'tilewms-source': _Source.TileWMS,\r\n    'urltile-source': _Source.UrlTile,\r\n    'utfgrid-source': _Source.UTFGrid,\r\n    'vector-source': _Source.Vector, // 防止与图层的配置重复\r\n    'vectortile-source': _Source.VectorTile, // 防止与图层的配置重复\r\n    'wmts-source': _Source.WMTS,\r\n    'xyz-source': _Source.XYZ,\r\n    'zoomify-source': _Source.Zoomify,\r\n    // 要素格式方式\r\n    esrijson: _Format.EsriJSON,\r\n    geojson: _Format.GeoJSON,\r\n    gml: _Format.GML,\r\n    gpx: _Format.GPX,\r\n    igc: _Format.IGC,\r\n    iiifinfo: _Format.IIIFInfo,\r\n    kml: _Format.KML,\r\n    mvt: _Format.MVT,\r\n    ows: _Format.OWS,\r\n    polyline: _Format.Polyline,\r\n    topojson: _Format.TopoJSON,\r\n    wfs: _Format.WFS,\r\n    wkb: _Format.WKB,\r\n    wkt: _Format.WKT,\r\n    wmscapabilities: _Format.WMSCapabilities,\r\n    wmsgetfeatureinfo: _Format.WMSGetFeatureInfo,\r\n    wmtscapabilities: _Format.WMTSCapabilities,\r\n    // 样式\r\n    circle: _Style.Circle,\r\n    fill: _Style.Fill,\r\n    icon: _Style.Icon,\r\n    iconimage: _Style.IconImage,\r\n    // 'image-style': _Style.Image, 基类 // 防止与图层的配置重复\r\n    regularshape: _Style.RegularShape,\r\n    stroke: _Style.Stroke,\r\n    style: _Style.Style,\r\n    text: _Style.Text,\r\n    'style-fn': StyleFn,\r\n    'text-fn': TextFn\r\n}\r\n\r\n/**\r\n * 根据配置文件获取对象\r\n * @param config 相关配置信息\r\n * @param {string} [type] 使用什么类型的原型进行实例化。\r\n *                        优先从config里面获取type，如果没有则使用传入的type\r\n * @returns 根据配置信息构造成的对象\r\n */\r\nexport const getObject = (config: any, type?: string) => {\r\n    // 类型检查 只有数组和对象才能被实例化\r\n    if (config === null || typeof config !== 'object') {\r\n        return config;\r\n    }\r\n    // 拷贝配置信息\r\n    // const _config = Object.assign(config);\r\n    const _config = JSON.parse(JSON.stringify(config)); // 需要深拷贝\r\n    try {\r\n        // 先判断config是否为数组\r\n        if (Array.isArray(_config)) {\r\n            for (let i = 0; i < _config.length; i++) {\r\n                _config[i] = getObject(_config[i]);\r\n            }\r\n            return _config;\r\n        }\r\n        // 如果是对象\r\n        // 遍历节点，递归构造对象\r\n        Object.keys(_config).forEach(key => {\r\n            _config[key] = getObject(_config[key], key);\r\n        });\r\n\r\n        // 优先从配置信息里面获取type，如果没有则使用传入的类型\r\n        type = _config.type || type;\r\n        // 获取构造函数\r\n        const constructor = getConstructor(type);\r\n        if (!constructor) {\r\n            throw new Error(`Cannot find a constructor of type ${type}`);\r\n        }\r\n        return new (constructor as any)(_config);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        return _config;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 根据类型获取相应的构造函数\r\n * @param {string | undefined} type 类型\r\n * @returns 构造函数\r\n */\r\nexport const getConstructor = (type: string | undefined) => {\r\n    if (!type) {\r\n        return;\r\n    }\r\n    return Objects[type.toLowerCase()];\r\n}\r\n","/**\r\n * 组件模式枚举\r\n * none 不启用任何功能 | funOnly 只启用函数 | propOnly 只启用属性 | always 总是启用\r\n */\r\nexport enum Mode {\r\n    /** 不启用任何功能 */\r\n    none,\r\n    /** 只启用函数 */\r\n    funOnly,\r\n    /** 只启用属性 */\r\n    propOnly,\r\n    /** 总是启用 */\r\n    always\r\n}","import { Mode } from \"../base/enums\";\r\n\r\n/**\r\n * 组件的创建参数\r\n */\r\nexport interface Manifest {\r\n    /**\r\n     * 标签的名称\r\n     */\r\n    tagName: string;\r\n    /**\r\n     * css类名，默认和tagName一致\r\n     */\r\n    className?: string;\r\n    /**\r\n     * html模板\r\n     */\r\n    template?: string;\r\n    /**\r\n     * 是否有config，默认为否\r\n     */\r\n    hasConfig?: boolean;\r\n    /**\r\n     * 模式\r\n     * 不启用 | 只启用函数 | 只启用属性 | 总是启用\r\n     * 默认值为always\r\n     */\r\n    mode?: Mode\r\n}\r\n\r\n\r\n/**\r\n * 组件装饰器\r\n * @param {Manifest} manifest 装饰器的参数\r\n * @returns {any} Target object.\r\n */\r\nexport const Component = (manifest: Manifest): any => {\r\n    return (target: any) => {\r\n        target.prototype._manifest = getManifest(manifest);\r\n        // 创建标签\r\n        customElements.define(manifest.tagName, target as CustomElementConstructor);\r\n        return target as any;\r\n    };\r\n}\r\n\r\n/**\r\n * 给装饰器参数添加默认值\r\n * @param manifest 装饰器参数\r\n * @returns 添加默认值之后的装饰器参数\r\n */\r\nconst getManifest = (manifest: Manifest): Manifest => {\r\n    // 合成manifest，添加默认参数\r\n    manifest = Object.assign({\r\n        hasConfig: false,\r\n        mode: Mode.always\r\n    }, manifest);\r\n\r\n    return manifest;\r\n}","/**\r\n * 立即执行 主要用于防抖\r\n * 将指定函数放到队列中\r\n * @param {Function} callback \r\n */\r\nexport const timerFunc = (callback: any) => {\r\n    if (Promise) {\r\n        Promise.resolve().then(callback)\r\n    }\r\n    // 使用动画执行\r\n    else if (requestAnimationFrame) {\r\n        requestAnimationFrame(callback);\r\n    }\r\n    else {\r\n        /**\r\n         * 使用setTimeout 可能会出现延迟\r\n         */\r\n        setTimeout(callback, 0);\r\n    }\r\n}","import { Manifest } from \"../decorators/component\";\r\nimport { Mode } from \"./enums\";\r\nimport { timerFunc } from \"../utils/tools\";\r\n\r\n\r\n/**\r\n * 初始化必要的参数\r\n */\r\ninterface StartInfo {\r\n    mapView: BaseWidget;\r\n    map: any;\r\n    config: object;\r\n    mapConfig: object;\r\n}\r\n\r\n\r\n/**\r\n * 组件原型\r\n */\r\nexport default class BaseWidget extends HTMLElement {\r\n    [x: string]: any; // 任意的string索引List\r\n    // 一些私有属性\r\n    #mapConfig?: object;\r\n    #mapView?: BaseWidget;\r\n    #map: any;\r\n    #config?: object;\r\n    #loading?: boolean;\r\n    #data: any;\r\n    #labelTag = 'w-l'; // label标签的名称\r\n    #rendered: boolean = false;// 渲染是否完成\r\n    #mode: Mode; //组件模式\r\n\r\n    constructor() {\r\n        super();\r\n        // 加载配置文件\r\n        if (this.manifest.hasConfig) {\r\n            this.#loadConfig(this.getAttribute('config') || this.getAttribute('configUrl'));\r\n        }\r\n\r\n        this.#mode = this.manifest.mode ?? Mode.always;\r\n        /**\r\n         * 防止出现如下错误：\r\n         *     Failed to construct 'CustomElement': The result must not have attributes\r\n         */\r\n        timerFunc(() => {\r\n            this.#initDom();\r\n            this.#onInit();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 手动启动初始化的方法\r\n     * @param args 初始化的必要参数\r\n     */\r\n    public startup(args: StartInfo) {\r\n        this.mapView = args.mapView;\r\n        this.map = args.map;\r\n        this.mapConfig = args.mapConfig;\r\n        this.config = args.config;\r\n    }\r\n\r\n    /**\r\n     * 组件的创建参数\r\n     */\r\n    public get manifest(): Manifest {\r\n        return this._manifest as Manifest;\r\n    }\r\n\r\n    /**\r\n     * 当前组件所在地图的配置 类似于之前的appConfig\r\n     */\r\n    public get mapConfig(): any {\r\n        return this.#mapConfig;\r\n    }\r\n    public set mapConfig(value: any) {\r\n        // mapConfig只设置一次，设置完调用组件初始化方法 #onInit\r\n        if (!this.#mapConfig && value) {\r\n            this.#mapConfig = value;\r\n            this.#onInit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 组件所在地图的原型，如果组件本身为地图，则指向自身\r\n     */\r\n    public get mapView(): BaseWidget {\r\n        return this.#mapView as BaseWidget;\r\n    }\r\n    public set mapView(value: BaseWidget) {\r\n        // mapView只设置一次，设置完调用组件初始化方法 #onInit\r\n        if (!this.#mapView && value) {\r\n            this.#mapView = value;\r\n            this.#onInit();\r\n        }\r\n    }\r\n\r\n    /**\r\n      * 当前组件所在地图\r\n      */\r\n    public get map() {\r\n        return this.#map;\r\n    }\r\n    public set map(value: any) {\r\n        // map只设置一次，设置完调用组件初始化方法 #onInit\r\n        if (!this.#map && value) {\r\n            this.#map = value;\r\n            this.#onInit();\r\n        }\r\n    }\r\n\r\n    /**\r\n      * 当前组件的配置\r\n      */\r\n    public get config(): any {\r\n        return this.#config;\r\n    }\r\n    public set config(value: object) {\r\n        // 当config设置为string时，认为其是url\r\n        if (typeof value === 'string') {\r\n            this.#loadConfig(value);\r\n            return;\r\n        }\r\n        // 当config设置为object时，认为其是配置\r\n        else if (typeof value === 'object') {\r\n            // config只设置一次，设置完调用组件初始化方法 #onInit\r\n            if (!this.#config && value) {\r\n                this.#config = value;\r\n                this.#onInit();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载config\r\n     * 当config不存在时，从文件加载config\r\n     */\r\n    async #loadConfig(configUrl: string | null) {\r\n        // 绑定config\r\n        if (!this.config && configUrl) {\r\n            this.loading = true;\r\n            const response = await fetch(configUrl);\r\n            this.config = response && response.ok && await response.json() || {};\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载中\r\n     */\r\n    public get loading(): boolean {\r\n        return !!this.#loading;\r\n    }\r\n    public set loading(value: boolean) {\r\n        this.#loading = value;\r\n        this.#onLoading();\r\n    }\r\n\r\n    /**\r\n     * loading状态改变\r\n     */\r\n    #onLoading() {\r\n        if (this.loading) {\r\n            this.classList.add('loading');\r\n        }\r\n        else {\r\n            this.classList.remove('loading');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化方法，用于初始化Dom\r\n     */\r\n    #initDom() {\r\n        // 添加样式\r\n        const className = this.manifest.className || this.manifest.tagName;\r\n        this.classList.add(className);\r\n\r\n        // 加载dom内容\r\n        // 要实现事件绑定 双大括号绑定属性\r\n        if (this.manifest.template) {\r\n            let template = this.manifest.template;\r\n\r\n            if ((this.#mode & Mode.propOnly) == Mode.propOnly) { // 二进制比较 判断是否需要属性绑定\r\n                // 获取需要绑定的属性\r\n                // 同时将 {{}} 替换成 #labelTag以便实现局部更新\r\n                template = template.replace(/\\{\\{(.+?)\\}\\}/g, (...args) => {\r\n                    return `<${this.#labelTag}>${args[1]}</${this.#labelTag}>`;\r\n                });\r\n            }\r\n\r\n            this.innerHTML = template;\r\n\r\n            if ((this.#mode & Mode.funOnly) == Mode.funOnly) { // 二进制比较 判断是否需要函数绑定\r\n                this.#bindRoot();\r\n            }\r\n        }\r\n\r\n        // 渲染完成\r\n        this.#rendered = true;\r\n    }\r\n\r\n    /**\r\n     * 用于渲染html的数据\r\n     */\r\n    public get $data(): any {\r\n        return this.#data;\r\n    }\r\n    public set $data(value: any) {\r\n        if ((this.#mode & Mode.propOnly) == Mode.propOnly) { // 二进制比较 判断是否需要属性绑定\r\n            this.#data = this.#defineReactive(value);\r\n            this.#refresh();\r\n        }\r\n        else {\r\n            this.#data = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 对象劫持\r\n     * @param {any} value \r\n     * @returns {any}\r\n     */\r\n    #defineReactive(value: any): any {\r\n        if (typeof value === 'object') {\r\n            Object.keys(value).forEach((key) => {\r\n                value[key] = this.#defineReactive(value[key]);\r\n            });\r\n            return new Proxy(value, {\r\n                set: (obj, p, val) => {\r\n                    // 重新劫持\r\n                    obj[p] = this.#defineReactive(val);\r\n                    // 刷新\r\n                    // this.#refresh();\r\n                    this.#delayRefresh();\r\n                    return true;\r\n                },\r\n                // get: (obj, p) => {\r\n                //     // 判断是否需要刷新dom\r\n                //     return obj[p];\r\n                // },\r\n            });\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    #refreshing: boolean = false;\r\n    /**\r\n     * 延迟执行刷新 防抖 \r\n     * 主要是防止数组的length也会触发刷新\r\n     * @returns \r\n     */\r\n    #delayRefresh() {\r\n        if (this.#refreshing) {\r\n            return;\r\n        }\r\n        this.#refreshing = true;\r\n        timerFunc(() => {\r\n            this.#refresh();\r\n            this.#refreshing = false;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 刷新所有 #labelTag 标签内容\r\n     * {{}}已经被 #labelTag 标签替换\r\n     */\r\n    #refresh() {\r\n        // 绑定属性\r\n        const atts = ['s-value', 's-src'];\r\n        atts.forEach(att => {\r\n            this.#bindAtt(att);\r\n        })\r\n\r\n        // 更新dom\r\n        const labels: any = this.querySelectorAll(this.#labelTag);\r\n        labels.forEach((label: any) => {\r\n            // 获取属性\r\n            const value = this.#getValue(label.origin);\r\n            // 判断属性是否变化，变化则更新\r\n            if (String(value) !== label.innerHTML) {\r\n                label.innerHTML = value;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 绑定属性\r\n     * @param att 需要绑定的属性 如s-value\r\n     */\r\n    #bindAtt(att: string) {\r\n        const nodes: any = this.querySelectorAll(`[${att}]`);\r\n        nodes.forEach((element: any) => {\r\n            // 获取属性\r\n            const key = element.getAttribute(att);\r\n            const _att = att.replace('s-', ''); // 真实属性\r\n            const value = this.#getValue(key);\r\n            // 判断属性是否变化，变化则更新\r\n            if (value !== element[_att]) {\r\n                element[_att] = value;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取指定属性值\r\n     * @param {string} origin 需要获取的属性 如a.b\r\n     * @returns 对应属性的值\r\n     */\r\n    #getValue(origin: string) {\r\n        try {\r\n            return origin.split('.').reduce((data: any, val: string) => {\r\n                return data[val];\r\n            }, this.$data);\r\n        } catch (error) {\r\n            console.error(error);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置$data中的属性\r\n     * @param key \r\n     * @param value \r\n     */\r\n    #setValue(key: string, value: any) {\r\n        let data = this.$data;\r\n        let array = key.split('.');\r\n        for (let i = 0; i < array.length; i++) {\r\n            const k = array[i];\r\n            if (i == array.length - 1) {\r\n                data[k] = value;\r\n            }\r\n            else {\r\n                data = data[k];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 给dom绑定$this，指向当前组件\r\n     */\r\n    #bindRoot() {\r\n        // 这个方法比递归更快\r\n        const list = this.querySelectorAll('*');\r\n        list.forEach((element: any) => {\r\n            if (!element.$this) {\r\n                element.$this = this; //绑定this\r\n                element.$set = (key: string, value: any) => {\r\n                    this.#setValue(key, value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 组件初始化状态，设置多个用于防抖\r\n     * unInited 未初始化\r\n     * initing 正在初始化\r\n     * inited 已经初始化\r\n     */\r\n    #state: 'unInited' | 'initing' | 'inited' = \"unInited\";\r\n    /**\r\n     * 组件初始化方法，只初始化一次\r\n     * 需要判断所有必要条件添加完成再进行初始化\r\n     */\r\n    async #onInit() {\r\n        if (!this.#rendered) { // 尚未渲染完成\r\n            return;\r\n        }\r\n\r\n        if (this.#state === 'initing' || this.#state === 'inited') {\r\n            return;\r\n        }\r\n\r\n        if (this.isReady()) {\r\n            this.#state = 'initing';\r\n            this.loading = true;\r\n            await this.onInit();\r\n            this.loading = false;\r\n            this.#state = 'inited';\r\n            this.afterInit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否可以开始初始化，该方法可以被重写\r\n     * @returns 是否可以开始初始化\r\n     */\r\n    public isReady(): boolean {\r\n        return !!(this.map && this.mapView && this.mapConfig && (this.config || !this.manifest.hasConfig));\r\n    }\r\n\r\n    /**\r\n     * 组件初始化方法\r\n     */\r\n    async onInit() { }\r\n\r\n    /**\r\n     * 初始化完成之后调用的方法，该方法可以被重写\r\n     */\r\n    afterInit() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 当组件被打开\r\n     */\r\n    onOpen() { }\r\n\r\n    /**\r\n     * 当组件被关闭\r\n     */\r\n    onClose() { }\r\n\r\n\r\n}","import BaseWidget from \"./base-widget\";\r\n\r\n/**\r\n * 地图组件原型\r\n */\r\nexport default class BaseMapWidget extends BaseWidget {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * 重写基类的isReady方法\r\n     * 地图只需要加载config就可以初始化了\r\n     * @returns 是否可以开始初始化\r\n     */\r\n    public isReady(): boolean {\r\n        return !!this.config;\r\n    }\r\n\r\n    /**\r\n     * 加载该map的其他组件\r\n     */\r\n    afterInit() {\r\n        // 当前地图的config即为当前地图的mapConfig\r\n        this.mapConfig = this.config;\r\n        this.mapView = this;\r\n\r\n        /**\r\n         * 需要使用的组件管理器的名字\r\n         * 只有map组件需要设置该项\r\n         * 默认值为 webgis-widget-manager\r\n         */\r\n        const _widgetManager = this.mapConfig.widgetManager || 'webgis-widget-manager';\r\n\r\n        // 创建组件管理器\r\n        const widgetManager = document.createElement(_widgetManager) as BaseWidget;\r\n\r\n        // 添加必要参数\r\n        /**\r\n         *      下面这种写法和直接调用startup效果是一样的\r\n                widgetManager.mapView = this;\r\n                widgetManager.config = this.mapConfig.widgets;\r\n                widgetManager.map = this.map;\r\n                widgetManager.mapConfig = this.mapConfig;\r\n         */\r\n\r\n        widgetManager.startup({\r\n            mapView: this,\r\n            map: this.map,\r\n            config: this.mapConfig.widgets,\r\n            mapConfig: this.mapConfig\r\n        })\r\n\r\n        // 渲染组件\r\n        // this.appendChild(widgetManager);\r\n        this.childNodes[0] ? this.insertBefore(widgetManager, this.childNodes[0]) : this.appendChild(widgetManager);\r\n    }\r\n\r\n}","import { Map } from \"ol\";\r\n\r\nimport { Component } from \"../../../decorators/component\";\r\nimport BaseMapWidget from \"../../../base/base-map\";\r\nimport { getObject } from \"../../utils\";\r\n\r\n// 组件的样式\r\nimport './map.scss';\r\n\r\n\r\n@Component({\r\n    tagName: 'ol-map',\r\n    className: 'ol-map',\r\n    hasConfig: true\r\n})\r\nexport class MapView extends BaseMapWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        const map: Map = getObject(this.config.map, 'map');\r\n        map.setTarget(this);// 地图容器 对应id 或组件\r\n        this.map = map;\r\n    }\r\n}\r\n","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\nimport Zoom from 'ol/control/Zoom';\r\n// 组件的样式\r\nimport './zoom-widget.scss';\r\n\r\n@Component({\r\n    tagName: 'ol-zoom-widget',\r\n    className: 'ol-zoom-widget'\r\n})\r\nexport class ZoomWidget extends BaseWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        let zoom = new Zoom({\r\n            target: this\r\n        });\r\n        this.map.addControl(zoom);\r\n    }\r\n}","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\nimport LayerShop from 'ol-ext/control/LayerShop';\r\n\r\n// 组件的样式\r\nimport './layer-list.scss';\r\n\r\n@Component({\r\n    tagName: 'ol-layer-list',\r\n    className: 'ol-layer-list'\r\n})\r\nexport class LayerList extends BaseWidget {\r\n    #layerIds: any[] = [];//记录打开透明度滑条的图层id\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        let layerShop = new LayerShop({\r\n            target: this,\r\n            noScroll: true,\r\n            collapsed: false,\r\n            trash: false,\r\n            extent: true as any,// ol-ext插件的类型写错了\r\n            show_progress: false,\r\n            // 判断需要展示的图层\r\n            displayInLayerSwitcher: (layer: any) => {\r\n                return layer.values_.listMode !== 'hide';\r\n            }\r\n        });\r\n        // 添加按钮\r\n        layerShop.on('drawlist', (e) => {\r\n            const li = e.li as HTMLElement;\r\n            const buttons = li.getElementsByClassName('ol-layerswitcher-buttons')[0];\r\n            const opacityBar = li.getElementsByClassName('layerswitcher-opacity')[0] as HTMLElement;\r\n            let div = document.createElement('div');\r\n            div.title = '透明度';\r\n            div.innerHTML = '\\u0025';\r\n\r\n            // 记录透明度滑条的状态\r\n            const layer: any = e.layer;\r\n            opacityBar.style.display = this.#layerIds.includes(layer.ol_uid) ? 'block' : 'none';\r\n\r\n            div.onclick = () => {\r\n                let display = opacityBar.style.display;\r\n                if (display === 'block') {\r\n                    opacityBar.style.display = 'none';\r\n                    this.#layerIds = this.#layerIds.filter(item => {\r\n                        return item !== layer.ol_uid;\r\n                    });\r\n                }\r\n                else {\r\n                    opacityBar.style.display = 'block';\r\n                    this.#layerIds.push(layer.ol_uid);\r\n                }\r\n            }\r\n            buttons.appendChild(div);\r\n        });\r\n        this.map.addControl(layerShop);\r\n    }\r\n}","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\nimport LayerSwitcher from 'ol-ext/control/LayerSwitcher';\r\n\r\n// 组件的样式\r\nimport './basemap-list.scss';\r\n\r\n@Component({\r\n    tagName: 'ol-basemap-list',\r\n    className: 'ol-basemap-list'\r\n})\r\nexport class BasemapList extends BaseWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        let control = new LayerSwitcherImage({\r\n            target: this\r\n        });\r\n        this.map.addControl(control);\r\n    }\r\n}\r\n\r\n// 底图管理器\r\nclass LayerSwitcherImage extends LayerSwitcher {\r\n    constructor(options: any) {\r\n        options = options || {};\r\n        options.switcherClass = ((options.switcherClass || '') + ' ol-layerswitcher-image').trim();\r\n        options.mouseover = (options.mouseover !== false);\r\n        super(options);\r\n    }\r\n\r\n    drawList(ul: any, layers: any) {\r\n        ul.style.height = 'auto';\r\n        // 获取底图图层\r\n        const basemaps = layers.array_.filter((item: any) => {\r\n            return item.values_.isBasemap;\r\n        });\r\n\r\n        basemaps.forEach((layer: any) => {\r\n            if (this.displayInLayerSwitcher(layer)) {\r\n                // 缩略图\r\n                let img = document.createElement('img');\r\n                img.src = layer.values_.thumbnail || 'images/thumbnail.png';\r\n                // 标题\r\n                let title = document.createElement('p');\r\n                title.innerHTML = layer.get(\"title\") || layer.get(\"name\");\r\n\r\n                let li = document.createElement('li');\r\n                li.className = 'ol-imgcontainer' + (layer.getVisible() ? ' ol-visible' : '');\r\n                li.appendChild(img);\r\n                li.appendChild(title);\r\n                // 点击事件\r\n                li.onclick = () => {\r\n                    (this as any).switchLayerVisibility(layer, layers);\r\n                };\r\n                (this as any)._setLayerForLI(li, layer);\r\n                if (!(this as any).testLayerVisibility(layer)) {\r\n                    li.classList.add('ol-layer-hidden');\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        });\r\n    }\r\n    /** Disable overflow\r\n    */\r\n    overflow() { }\r\n}","export default \"<div>{{coordinate}} 比例尺 {{scale}}</div>\"","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\nimport { listen } from 'ol/events';\r\n\r\n// 组件的样式\r\nimport './coordinate.scss';\r\n// 组件的模板\r\nimport template from './coordinate.html?raw';\r\n\r\n\r\n\r\n@Component({\r\n    tagName: 'ol-coordinate',\r\n    className: 'ol-coordinate',\r\n    template: template\r\n})\r\nexport class Coordinate extends BaseWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        this.$data = {\r\n            coordinate: '',\r\n            scale: ''\r\n        };\r\n        const viewport = this.map.getViewport();\r\n        listen(viewport, 'pointermove', this.handleMouseMove, this);\r\n        this.map.on('moveend', this.moveEnd.bind(this));\r\n    }\r\n\r\n    // 鼠标移动\r\n    handleMouseMove(event: any) {\r\n        const pixel = this.map.getEventPixel(event);\r\n        const coordinate = this.map.getCoordinateFromPixelInternal(pixel);\r\n        if (coordinate) {\r\n            this.$data.coordinate = `${coordinate[0].toFixed(3)} ${coordinate[1].toFixed(3)}`;\r\n        }\r\n    }\r\n\r\n    // 比例尺变化\r\n    moveEnd() {\r\n        const scale = this.getScale();\r\n        if (scale ?? false) {\r\n            this.$data.scale = `1:${scale.toLocaleString()}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取比例尺\r\n     * @return {number} 比例尺.\r\n     */\r\n    getScale(): number {\r\n        const view = this.map.getView();\r\n        //默认dpi\r\n        const DEFAULT_DPI = 25.4 / 0.28;\r\n        //每米多少英寸\r\n        const inchesPerMeter = 1000 / 25.4;\r\n        var currentScale = 1;\r\n        //如果是度分秒的话需要转换为米\r\n        if (view.getProjection().getUnits() != 'metric') {\r\n            currentScale = view.getResolution() * view.getProjection().getMetersPerUnit() * inchesPerMeter * DEFAULT_DPI;\r\n        } else {\r\n            currentScale = view.getResolution() * inchesPerMeter * DEFAULT_DPI;\r\n        }\r\n\r\n        return Math.round(currentScale);\r\n    }\r\n}","export default \"<fieldset>\\r\\n    <legend>\\r\\n        数据解析\\r\\n    </legend>\\r\\n    <div>\\r\\n        <button onclick=\\\"$this.add(event)\\\">测试加一</button>\\r\\n        结果：{{a}}\\r\\n    </div>\\r\\n\\r\\n    <div>\\r\\n        <button onclick=\\\"$this.changeName(event)\\\">测试人名</button>\\r\\n        你是：{{b}}\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div>\\r\\n        <button onclick=\\\"$this.changeValue(event)\\\">测试多重属性</button>\\r\\n        c.d.e : {{c.d.e}}\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div>\\r\\n        <button onclick=\\\"$this.changeArr(event)\\\">测试数组</button>\\r\\n        数组长度：{{f.length}}\\r\\n    </div>\\r\\n</fieldset>\\r\\n\\r\\n\\r\\n<fieldset>\\r\\n    <legend>\\r\\n        事件数据绑定\\r\\n    </legend>\\r\\n    <div>\\r\\n        <input oninput=\\\"$this.$data.aa=value\\\">\\r\\n        <br>\\r\\n        结果：{{aa}}\\r\\n    </div>\\r\\n</fieldset>\\r\\n\\r\\n<fieldset>\\r\\n    <legend>\\r\\n        属性绑定 + 直接赋值\\r\\n    </legend>\\r\\n    <div>\\r\\n        <input s-value=\\\"bb\\\" oninput=\\\"$this.$data.bb=value\\\">\\r\\n        <br>\\r\\n        结果：{{bb}}\\r\\n    </div>\\r\\n</fieldset>\\r\\n\\r\\n<fieldset>\\r\\n    <legend>\\r\\n        属性绑定 + 绑定赋值\\r\\n    </legend>\\r\\n    <div>\\r\\n        <input s-value=\\\"cc\\\" oninput=\\\"$set('cc',value)\\\">\\r\\n        <!-- <input s-value=\\\"cc\\\" oninput=\\\"console.log(this)\\\"> -->\\r\\n        <br>\\r\\n        结果：{{cc}}\\r\\n    </div>\\r\\n</fieldset>\"","import BaseWidget from \"../../../base/base-widget\";\r\nimport { Component } from \"../../../decorators/component\";\r\n\r\n\r\n// 组件的样式\r\nimport './hello-world.scss';\r\n// 组件的模板\r\nimport template from './hello-world.html?raw';\r\n// import { Mode } from \"../../base/enums\";\r\n\r\n\r\n@Component({\r\n    tagName: 'ol-hello-world',\r\n    className: 'ol-hello-world',\r\n    template: template,\r\n    // mode: Mode.none\r\n})\r\nexport class HelloWorld extends BaseWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        this.$data = {\r\n            a: 1,\r\n            b: \"张三\",\r\n            c: {\r\n                d: {\r\n                    e: 1\r\n                }\r\n            },\r\n            f: [1],\r\n            aa: '123',\r\n            bb: 'start',\r\n            cc: '121'\r\n        }\r\n        // this.$data = [1, 2]\r\n\r\n    }\r\n\r\n    hello(event: any) {\r\n        console.log(event)\r\n        // alert('hello-world')\r\n        // this.$data.a = 2222;\r\n        // this.$data.c = {\r\n        //     d: \"张三\"\r\n        // }\r\n        this.$data.c.d = \"和了了了了了了\"\r\n    }\r\n\r\n    changeName() {\r\n        this.$data.b = this.$data.b == '张三' ? '李四' : '张三';\r\n    }\r\n\r\n    changeValue() {\r\n        // this.$data.c.d.e = Math.random();\r\n        this.$data.c.d = {\r\n            // e: parseInt(String(Math.random() * 10))\r\n            e: this.$data.c.d.e + 1\r\n        }\r\n    }\r\n\r\n    changeArr() {\r\n        this.$data.f.push(1);\r\n    }\r\n\r\n\r\n    add() {\r\n        this.$data.a++;\r\n    }\r\n\r\n    kill() {\r\n        return 'hello';\r\n    }\r\n}","import { Map } from \"ol\";\r\nimport { MousePosition } from 'ol/control';\r\n\r\nimport { Component } from \"../../../decorators/component\";\r\nimport BaseMapWidget from \"../../../base/base-map\";\r\nimport { getObject } from \"../../utils/object\";\r\n\r\n// 组件的样式\r\nimport './map-test.scss';\r\n\r\n@Component({\r\n    tagName: 'ol-map-test',\r\n    className: 'ol-map-test',\r\n    hasConfig: true\r\n})\r\nexport class MapViewTest extends BaseMapWidget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    async onInit() {\r\n        const map: Map = getObject(this.config.map, 'map');\r\n        map.setTarget(this);// 地图容器 对应id 或组件\r\n        map.addControl(new MousePosition());\r\n        this.map = map;\r\n\r\n        // const mapConfig = this.config.map;\r\n        // const layers = mapConfig.layers.map((item: any) => {\r\n        //     return getObject(item);\r\n        // });\r\n\r\n        // let vectorTileSource = new VectorTile({\r\n        //     \"url\": \"http://jojo1986.cn:8188/geoserver/gwc/service/tms/1.0.0/SY:ln_village_p@EPSG:3857@pbf/{z}/{x}/{-y}.pbf\",\r\n        //     \"format\": new MVT()\r\n        // });\r\n\r\n        // const clusterSource = new Cluster({\r\n        //     distance: 40,\r\n        //     source: vectorTileSource,\r\n        //     geometryFunction: function (feature: any) {\r\n        //         return feature.getGeometry().getCoordinates();\r\n        //     },\r\n        //     projection: 'EPSG:3857'\r\n        // });\r\n\r\n        // let aaa = new VectorTileLayer({\r\n        //     \"title\": \"村点\",\r\n        //     \"type\": \"VectorTile\",\r\n        //     \"minZoom\": 12,\r\n        //     \"maxZoom\": 18,\r\n        //     \"source\": clusterSource,\r\n        //     \"style\": getObject({\r\n        //         \"type\": \"style-fn\",\r\n        //         \"image\": {\r\n        //             \"type\": \"Icon\",\r\n        //             \"imgSize\": [\r\n        //                 350,\r\n        //                 360\r\n        //             ],\r\n        //             \"scale\": 0.1,\r\n        //             \"src\": \"styles/a.jpg\"\r\n        //         },\r\n        //         \"text\": {\r\n        //             \"type\": \"Text-fn\",\r\n        //             \"font\": \"12px Calibri,sans-serif\",\r\n        //             \"fill\": {\r\n        //                 \"type\": \"Fill\",\r\n        //                 \"color\": \"#000\"\r\n        //             },\r\n        //             \"stroke\": {\r\n        //                 \"type\": \"Stroke\",\r\n        //                 \"color\": \"#fff\",\r\n        //                 \"width\": 1\r\n        //             },\r\n        //             \"text1\": \"{province_name}{city_name}{county_name}{name}\",\r\n        //             \"textAlign\": \"center\",\r\n        //             \"textBaseline\": \"middle\",\r\n        //             \"offsetY\": 50\r\n        //         }\r\n        //     })\r\n        // })\r\n        // layers.push(aaa);\r\n        // //  创建地图对象\r\n        // this.map = new Map({\r\n        //     target: this, // 地图容器 对应id 或组件\r\n        //     layers: layers,// 图层\r\n        //     view: getObject(mapConfig.view, 'view')\r\n        // }).addControl(new MousePosition());\r\n\r\n    }\r\n}\r\n"],"names":["StyleFn","config","_config","style","Style","feature","text","TextFn","Text","options","__privateAdd","_getCurrentValue","_feature","_text","__privateSet","__privateGet","item","__privateMethod","getCurrentValue_fn","error","template","args","_a","Objects","Map","View","Projection","defaults","_Layer","_Source","_Format","_Style","getObject","type","i","key","constructor","getConstructor","Mode","Mode2","Component","manifest","target","getManifest","timerFunc","callback","BaseWidget","_loadConfig","_onLoading","_initDom","_defineReactive","_delayRefresh","_refresh","_bindAtt","_getValue","_setValue","_bindRoot","_onInit","_mapConfig","_mapView","_map","_loading","_data","_labelTag","_rendered","_mode","_refreshing","_state","loadConfig_fn","initDom_fn","onInit_fn","value","onLoading_fn","defineReactive_fn","refresh_fn","configUrl","response","className","bindRoot_fn","obj","p","val","delayRefresh_fn","att","bindAtt_fn","label","getValue_fn","element","_att","origin","data","setValue_fn","array","k","BaseMapWidget","_widgetManager","widgetManager","MapView","map","exports","__decorateClass","ZoomWidget","zoom","Zoom","LayerList","_layerIds","layerShop","LayerShop","layer","e","li","buttons","opacityBar","div","BasemapList","control","LayerSwitcherImage","LayerSwitcher","ul","layers","img","title","template$1","Coordinate","viewport","listen","event","pixel","coordinate","scale","view","DEFAULT_DPI","inchesPerMeter","currentScale","HelloWorld","MapViewTest","MousePosition"],"mappings":"20DAMO,MAAMA,EAAQ,CAMjB,YAAYC,EAAa,CACrB,MAAMC,EAAU,OAAO,OAAO,GAAID,CAAM,EAClCE,EAAQ,IAAIC,GAAMF,CAAO,EAC/B,OAAQG,GAAqB,CAEnB,MAAAC,EAAOH,EAAM,UACd,OAAAG,EAAA,YAAcA,EAAK,WAAWD,CAAO,EACnCF,CAAA,CAEf,CACJ,CCjBO,MAAMI,WAAeC,EAAK,CAM7B,YAAYC,EAAc,CACtB,MAAMA,CAAO,EAiDjBC,EAAA,KAAAC,GAtDAD,EAAA,KAAAE,EAAA,QAEAF,EAAA,KAAAG,EAAA,QAIIC,EAAA,KAAKD,EAAQJ,EAAQ,KACzB,CAMA,WAAWJ,EAAkB,CACzBS,EAAA,KAAKF,EAAWP,EACpB,CAeA,SAAU,CACF,GAAA,CACI,IAAAC,EAEJ,OAAI,MAAM,QAAQS,EAAA,KAAKF,EAAK,EACjBP,EAAAS,EAAA,KAAKF,GAAM,IAAYG,GACnBC,EAAA,KAAKN,EAAAO,IAAL,UAAsBF,EAChC,EAGMV,EAAAW,EAAA,KAAKN,EAAAO,IAAL,UAAsBH,EAAA,KAAKF,IAE/BP,QACFa,GACL,QAAQ,MAAMA,CAAK,EACnB,MACJ,CACJ,CAaJ,CA5DIP,EAAA,YAEAC,EAAA,YAoDAF,EAAA,YAAAO,YAAiBE,EAAkB,CAE/B,OAAOA,EAAS,QAAQ,aAAc,IAAIC,IAAS,OAC/C,OAAOC,EAAAP,EAAA,KAAKH,KAAL,YAAAU,EAAe,IAAID,EAAK,CAAC,EAAC,CACpC,CACL,ECtDJ,MAAME,GAAe,CAEjB,IAAKC,EAAA,IACL,KAAMC,EAAA,KAEN,WAAYC,EAAA,SAEZC,GAAA,SAEA,UAAWC,EAAO,UAClB,MAAOA,EAAO,MACd,QAASA,EAAO,QAChB,MAAOA,EAAO,MACd,MAAOA,EAAO,MACd,aAAcA,EAAO,aACrB,KAAMA,EAAO,KACb,OAAQA,EAAO,OACf,YAAaA,EAAO,YACpB,WAAYA,EAAO,WACnB,YAAaA,EAAO,YACpB,UAAWA,EAAO,UAElB,kBAAmBC,EAAQ,SAC3B,iBAAkBA,EAAQ,QAC1B,iBAAkBA,EAAQ,QAC1B,kBAAmBA,EAAQ,SAC3B,iBAAkBA,EAAQ,QAC1B,cAAeA,EAAQ,KAEvB,yBAA0BA,EAAQ,gBAClC,qBAAsBA,EAAQ,YAC9B,uBAAwBA,EAAQ,cAChC,qBAAsBA,EAAQ,YAC9B,kBAAmBA,EAAQ,SAC3B,aAAcA,EAAQ,IACtB,gBAAiBA,EAAQ,OAEzB,gBAAiBA,EAAQ,OAEzB,wBAAyBA,EAAQ,eACjC,mBAAoBA,EAAQ,UAC5B,mBAAoBA,EAAQ,UAC5B,kBAAmBA,EAAQ,SAC3B,iBAAkBA,EAAQ,QAC1B,iBAAkBA,EAAQ,QAC1B,iBAAkBA,EAAQ,QAC1B,gBAAiBA,EAAQ,OACzB,oBAAqBA,EAAQ,WAC7B,cAAeA,EAAQ,KACvB,aAAcA,EAAQ,IACtB,iBAAkBA,EAAQ,QAE1B,SAAUC,EAAQ,SAClB,QAASA,EAAQ,QACjB,IAAKA,EAAQ,IACb,IAAKA,EAAQ,IACb,IAAKA,EAAQ,IACb,SAAUA,EAAQ,SAClB,IAAKA,EAAQ,IACb,IAAKA,EAAQ,IACb,IAAKA,EAAQ,IACb,SAAUA,EAAQ,SAClB,SAAUA,EAAQ,SAClB,IAAKA,EAAQ,IACb,IAAKA,EAAQ,IACb,IAAKA,EAAQ,IACb,gBAAiBA,EAAQ,gBACzB,kBAAmBA,EAAQ,kBAC3B,iBAAkBA,EAAQ,iBAE1B,OAAQC,EAAO,OACf,KAAMA,EAAO,KACb,KAAMA,EAAO,KACb,UAAWA,EAAO,UAElB,aAAcA,EAAO,aACrB,OAAQA,EAAO,OACf,MAAOA,EAAO,MACd,KAAMA,EAAO,KACb,WAAY/B,GACZ,UAAWO,EACf,EASayB,EAAY,CAAC/B,EAAagC,IAAkB,CAErD,GAAIhC,IAAW,MAAQ,OAAOA,GAAW,SAC9B,OAAAA,EAIX,MAAMC,EAAU,KAAK,MAAM,KAAK,UAAUD,CAAM,CAAC,EAC7C,GAAA,CAEI,GAAA,MAAM,QAAQC,CAAO,EAAG,CACxB,QAASgC,EAAI,EAAGA,EAAIhC,EAAQ,OAAQgC,IAChChC,EAAQgC,CAAC,EAAIF,EAAU9B,EAAQgC,CAAC,CAAC,EAE9B,OAAAhC,EAIX,OAAO,KAAKA,CAAO,EAAE,QAAeiC,GAAA,CAChCjC,EAAQiC,CAAG,EAAIH,EAAU9B,EAAQiC,CAAG,EAAGA,CAAG,CAAA,CAC7C,EAGDF,EAAO/B,EAAQ,MAAQ+B,EAEjB,MAAAG,EAAcC,GAAeJ,CAAI,EACvC,GAAI,CAACG,EACK,MAAA,IAAI,MAAM,qCAAqCH,GAAM,EAExD,OAAA,IAAKG,EAAoBlC,CAAO,QAElCiB,GACL,eAAQ,MAAMA,CAAK,EACZjB,CACX,CACJ,EAQamC,GAAkBJ,GAA6B,CACxD,GAAKA,EAGE,OAAAV,GAAQU,EAAK,YAAA,CAAa,CACrC,EClJY,IAAAK,GAAAA,IAERA,EAAAC,EAAA,KAAA,CAAA,EAAA,OAEAD,EAAAC,EAAA,QAAA,CAAA,EAAA,UAEAD,EAAAC,EAAA,SAAA,CAAA,EAAA,WAEAD,EAAAC,EAAA,OAAA,CAAA,EAAA,SARQD,IAAAA,GAAA,CAAA,CAAA,ECgCC,MAAAE,EAAaC,GACdC,IACGA,EAAA,UAAU,UAAYC,GAAYF,CAAQ,EAElC,eAAA,OAAOA,EAAS,QAASC,CAAkC,EACnEA,GASTC,GAAeF,IAEjBA,EAAW,OAAO,OAAO,CACrB,UAAW,GACX,KAAMH,EAAK,QACZG,CAAQ,EAEJA,GCpDEG,GAAaC,GAAkB,CACpC,QACQ,QAAA,QAAA,EAAU,KAAKA,CAAQ,EAG1B,sBACL,sBAAsBA,CAAQ,EAM9B,WAAWA,EAAU,CAAC,CAE9B,ECAA,MAAqBC,UAAmB,WAAY,CAahD,aAAc,CACJ,QAuGVpC,EAAA,KAAMqC,GAwBNrC,EAAA,KAAAsC,GAYAtC,EAAA,KAAAuC,GAkDAvC,EAAA,KAAAwC,GA+BAxC,EAAA,KAAAyC,GAeAzC,EAAA,KAAA0C,GAuBA1C,EAAA,KAAA2C,GAmBA3C,EAAA,KAAA4C,GAgBA5C,EAAA,KAAA6C,GAiBA7C,EAAA,KAAA8C,GAwBA9C,EAAA,KAAM+C,GAzVN/C,EAAA,KAAAgD,EAAA,QACAhD,EAAA,KAAAiD,EAAA,QACAjD,EAAA,KAAAkD,EAAA,QACAlD,EAAA,KAAAR,EAAA,QACAQ,EAAA,KAAAmD,EAAA,QACAnD,EAAA,KAAAoD,EAAA,QACApD,EAAA,KAAAqD,EAAY,OACZrD,EAAA,KAAAsD,EAAqB,IACrBtD,EAAA,KAAAuD,EAAA,QAyNAvD,EAAA,KAAAwD,EAAuB,IAmHvBxD,EAAA,KAAAyD,EAA4C,YAvUpC,KAAK,SAAS,WACTlD,EAAA,KAAA8B,EAAAqB,IAAA,UAAY,KAAK,aAAa,QAAQ,GAAK,KAAK,aAAa,WAAW,GAGjFtD,EAAA,KAAKmD,EAAQ,KAAK,SAAS,MAAQ3B,EAAK,QAKxCM,GAAU,IAAM,CACZ3B,EAAA,KAAKgC,EAAAoB,IAAL,WACApD,EAAA,KAAKwC,EAAAa,GAAL,UAAa,CAChB,CACL,CAMO,QAAQjD,EAAiB,CAC5B,KAAK,QAAUA,EAAK,QACpB,KAAK,IAAMA,EAAK,IAChB,KAAK,UAAYA,EAAK,UACtB,KAAK,OAASA,EAAK,MACvB,CAKA,IAAW,UAAqB,CAC5B,OAAO,KAAK,SAChB,CAKA,IAAW,WAAiB,CACxB,OAAON,EAAA,KAAK2C,EAChB,CACA,IAAW,UAAUa,EAAY,CAEzB,CAACxD,EAAA,KAAK2C,IAAca,IACpBzD,EAAA,KAAK4C,EAAaa,GAClBtD,EAAA,KAAKwC,EAAAa,GAAL,WAER,CAKA,IAAW,SAAsB,CAC7B,OAAOvD,EAAA,KAAK4C,EAChB,CACA,IAAW,QAAQY,EAAmB,CAE9B,CAACxD,EAAA,KAAK4C,IAAYY,IAClBzD,EAAA,KAAK6C,EAAWY,GAChBtD,EAAA,KAAKwC,EAAAa,GAAL,WAER,CAKA,IAAW,KAAM,CACb,OAAOvD,EAAA,KAAK6C,EAChB,CACA,IAAW,IAAIW,EAAY,CAEnB,CAACxD,EAAA,KAAK6C,IAAQW,IACdzD,EAAA,KAAK8C,EAAOW,GACZtD,EAAA,KAAKwC,EAAAa,GAAL,WAER,CAKA,IAAW,QAAc,CACrB,OAAOvD,EAAA,KAAKb,EAChB,CACA,IAAW,OAAOqE,EAAe,CAEzB,GAAA,OAAOA,GAAU,SAAU,CAC3BtD,EAAA,KAAK8B,EAAAqB,IAAL,UAAiBG,GACjB,YAGK,OAAOA,GAAU,UAElB,CAACxD,EAAA,KAAKb,IAAWqE,IACjBzD,EAAA,KAAKZ,EAAUqE,GACftD,EAAA,KAAKwC,EAAAa,GAAL,WAGZ,CAmBA,IAAW,SAAmB,CACnB,MAAA,CAAC,CAACvD,EAAA,KAAK8C,EAClB,CACA,IAAW,QAAQU,EAAgB,CAC/BzD,EAAA,KAAK+C,EAAWU,GAChBtD,EAAA,KAAK+B,EAAAwB,IAAL,UACJ,CAiDA,IAAW,OAAa,CACpB,OAAOzD,EAAA,KAAK+C,EAChB,CACA,IAAW,MAAMS,EAAY,EACpBxD,EAAA,KAAKkD,GAAQ3B,EAAK,WAAaA,EAAK,UAChCxB,EAAA,KAAAgD,EAAQ7C,EAAA,KAAKiC,EAAAuB,GAAL,UAAqBF,IAClCtD,EAAA,KAAKmC,EAAAsB,IAAL,YAGA5D,EAAA,KAAKgD,EAAQS,EAErB,CA+KO,SAAmB,CACtB,MAAO,CAAC,EAAE,KAAK,KAAO,KAAK,SAAW,KAAK,YAAc,KAAK,QAAU,CAAC,KAAK,SAAS,WAC3F,CAKA,MAAM,QAAS,CAAE,CAKjB,WAAY,CAEZ,CAKA,QAAS,CAAE,CAKX,SAAU,CAAE,CAGhB,CA3YIb,EAAA,YACAC,EAAA,YACAC,EAAA,YACA1D,EAAA,YACA2D,EAAA,YACAC,EAAA,YACAC,EAAA,YACAC,EAAA,YACAC,EAAA,YA0GMlB,EAAA,YAAAqB,kBAAYO,EAA0B,CAEpC,GAAA,CAAC,KAAK,QAAUA,EAAW,CAC3B,KAAK,QAAU,GACT,MAAAC,EAAW,MAAM,MAAMD,CAAS,EACjC,KAAA,OAASC,GAAYA,EAAS,IAAM,MAAMA,EAAS,QAAU,GAClE,KAAK,QAAU,GAEvB,EAgBA5B,EAAA,YAAAwB,GAAa,UAAA,CACL,KAAK,QACA,KAAA,UAAU,IAAI,SAAS,EAGvB,KAAA,UAAU,OAAO,SAAS,CAEvC,EAKAvB,EAAA,YAAAoB,GAAW,UAAA,CAEP,MAAMQ,EAAY,KAAK,SAAS,WAAa,KAAK,SAAS,QAKvD,GAJC,KAAA,UAAU,IAAIA,CAAS,EAIxB,KAAK,SAAS,SAAU,CACpB,IAAAzD,EAAW,KAAK,SAAS,UAExBL,EAAA,KAAKkD,GAAQ3B,EAAK,WAAaA,EAAK,WAGrClB,EAAWA,EAAS,QAAQ,iBAAkB,IAAIC,IACvC,IAAIN,EAAA,KAAKgD,MAAa1C,EAAK,CAAC,MAAMN,EAAA,KAAKgD,KACjD,GAGL,KAAK,UAAY3C,GAEZL,EAAA,KAAKkD,GAAQ3B,EAAK,UAAYA,EAAK,SACpCrB,EAAA,KAAKuC,EAAAsB,IAAL,WAKRhE,EAAA,KAAKkD,EAAY,GACrB,EAuBAd,EAAA,YAAAuB,WAAgBF,EAAiB,CACzB,OAAA,OAAOA,GAAU,UACjB,OAAO,KAAKA,CAAK,EAAE,QAASpC,GAAQ,CAChCoC,EAAMpC,CAAG,EAAIlB,EAAA,KAAKiC,EAAAuB,GAAL,UAAqBF,EAAMpC,CAAG,EAAC,CAC/C,EACM,IAAI,MAAMoC,EAAO,CACpB,IAAK,CAACQ,EAAKC,EAAGC,KAEVF,EAAIC,CAAC,EAAI/D,EAAA,KAAKiC,EAAAuB,GAAL,UAAqBQ,GAG9BhE,EAAA,KAAKkC,EAAA+B,IAAL,WACO,GACX,CAKH,GAGMX,CAEf,EAEAL,EAAA,YAMAf,EAAA,YAAA+B,GAAgB,UAAA,CACRnE,EAAA,KAAKmD,KAGTpD,EAAA,KAAKoD,EAAc,IACnBtB,GAAU,IAAM,CACZ3B,EAAA,KAAKmC,EAAAsB,IAAL,WACA5D,EAAA,KAAKoD,EAAc,GAAA,CACtB,EACL,EAMAd,EAAA,YAAAsB,GAAW,UAAA,CAEM,CAAC,UAAW,OAAO,EAC3B,QAAeS,GAAA,CAChBlE,EAAA,KAAKoC,EAAA+B,IAAL,UAAcD,EAAG,CACpB,EAGmB,KAAK,iBAAiBpE,EAAA,KAAKgD,EAAS,EACjD,QAASsB,GAAe,CAE3B,MAAMd,EAAQtD,EAAA,KAAKqC,EAAAgC,IAAL,UAAeD,EAAM,QAE/B,OAAOd,CAAK,IAAMc,EAAM,YACxBA,EAAM,UAAYd,EACtB,CACH,CACL,EAMAlB,EAAA,YAAA+B,YAASD,EAAa,CACC,KAAK,iBAAiB,IAAIA,IAAM,EAC7C,QAASI,GAAiB,CAEtB,MAAApD,EAAMoD,EAAQ,aAAaJ,CAAG,EAC9BK,EAAOL,EAAI,QAAQ,KAAM,EAAE,EAC3BZ,EAAQtD,EAAA,KAAKqC,EAAAgC,IAAL,UAAenD,GAEzBoC,IAAUgB,EAAQC,CAAI,IACtBD,EAAQC,CAAI,EAAIjB,EACpB,CACH,CACL,EAOAjB,EAAA,YAAAgC,YAAUG,EAAgB,CAClB,GAAA,CACA,OAAOA,EAAO,MAAM,GAAG,EAAE,OAAO,CAACC,EAAWT,IACjCS,EAAKT,CAAG,EAChB,KAAK,KAAK,QACR9D,GACL,QAAQ,MAAMA,CAAK,EACnB,MACJ,CACJ,EAOAoC,EAAA,YAAAoC,GAAA,SAAUxD,EAAaoC,EAAY,CAC/B,IAAImB,EAAO,KAAK,MACZE,EAAQzD,EAAI,MAAM,GAAG,EACzB,QAASD,EAAI,EAAGA,EAAI0D,EAAM,OAAQ1D,IAAK,CAC7B,MAAA2D,EAAID,EAAM1D,CAAC,EACbA,GAAK0D,EAAM,OAAS,EACpBF,EAAKG,CAAC,EAAItB,EAGVmB,EAAOA,EAAKG,CAAC,EAGzB,EAKArC,EAAA,YAAAsB,GAAY,UAAA,CAEK,KAAK,iBAAiB,GAAG,EACjC,QAASS,GAAiB,CACtBA,EAAQ,QACTA,EAAQ,MAAQ,KACRA,EAAA,KAAO,CAACpD,EAAaoC,IAAe,CACnCtD,EAAA,KAAAsC,EAAAoC,IAAA,UAAUxD,EAAKoC,EAAK,EAEjC,CACH,CACL,EAQAJ,EAAA,YAKMV,EAAA,YAAAa,EAAU,gBAAA,CACPvD,EAAA,KAAKiD,KAINjD,EAAA,KAAKoD,KAAW,WAAapD,EAAA,KAAKoD,KAAW,UAI7C,KAAK,YACLrD,EAAA,KAAKqD,EAAS,WACd,KAAK,QAAU,GACf,MAAM,KAAK,SACX,KAAK,QAAU,GACfrD,EAAA,KAAKqD,EAAS,UACd,KAAK,UAAU,GAEvB,EC3XJ,MAAqB2B,WAAsBhD,CAAW,CAElD,aAAc,CACJ,OACV,CAOO,SAAmB,CACf,MAAA,CAAC,CAAC,KAAK,MAClB,CAKA,WAAY,CAER,KAAK,UAAY,KAAK,OACtB,KAAK,QAAU,KAOT,MAAAiD,EAAiB,KAAK,UAAU,eAAiB,wBAGjDC,EAAgB,SAAS,cAAcD,CAAc,EAW3DC,EAAc,QAAQ,CAClB,QAAS,KACT,IAAK,KAAK,IACV,OAAQ,KAAK,UAAU,QACvB,UAAW,KAAK,SAAA,CACnB,EAID,KAAK,WAAW,CAAC,EAAI,KAAK,aAAaA,EAAe,KAAK,WAAW,CAAC,CAAC,EAAI,KAAK,YAAYA,CAAa,CAC9G,CAEJ,kNC5CaC,EAAAA,QAAN,cAAsBH,EAAc,CACvC,aAAc,CACJ,OACV,CAEA,MAAM,QAAS,CACX,MAAMI,EAAWlE,EAAU,KAAK,OAAO,IAAK,KAAK,EACjDkE,EAAI,UAAU,IAAI,EAClB,KAAK,IAAMA,CACf,CACJ,EAVOC,EAAA,QAAAC,GAAA,CALN5D,EAAU,CACP,QAAS,SACT,UAAW,SACX,UAAW,EAAA,CACd,CAAA,EACYyD,SAAA,mNCLAI,EAAAA,WAAN,cAAyBvD,CAAW,CACvC,aAAc,CACJ,OACV,CAEA,MAAM,QAAS,CACP,IAAAwD,EAAO,IAAIC,GAAK,CAChB,OAAQ,IAAA,CACX,EACI,KAAA,IAAI,WAAWD,CAAI,CAC5B,CACJ,EAXOH,EAAA,WAAAC,GAAA,CAJN5D,EAAU,CACP,QAAS,iBACT,UAAW,gBAAA,CACd,CAAA,EACY6D,YAAA,mNCCAG,EAAAA,WAANlF,GAAA,cAAwBwB,CAAW,CAGtC,aAAc,CACJ,QAHVpC,EAAA,KAAA+F,EAAmB,CAAA,EAInB,CAEA,MAAM,QAAS,CACP,IAAAC,EAAY,IAAIC,GAAU,CAC1B,OAAQ,KACR,SAAU,GACV,UAAW,GACX,MAAO,GACP,OAAQ,GACR,cAAe,GAEf,uBAAyBC,GACdA,EAAM,QAAQ,WAAa,MACtC,CACH,EAESF,EAAA,GAAG,WAAaG,GAAM,CAC5B,MAAMC,EAAKD,EAAE,GACPE,EAAUD,EAAG,uBAAuB,0BAA0B,EAAE,CAAC,EACjEE,EAAaF,EAAG,uBAAuB,uBAAuB,EAAE,CAAC,EACnE,IAAAG,EAAM,SAAS,cAAc,KAAK,EACtCA,EAAI,MAAQ,MACZA,EAAI,UAAY,IAGhB,MAAML,EAAaC,EAAE,MACVG,EAAA,MAAM,QAAUjG,EAAA,KAAK0F,GAAU,SAASG,EAAM,MAAM,EAAI,QAAU,OAE7EK,EAAI,QAAU,IAAM,CACFD,EAAW,MAAM,UACf,SACZA,EAAW,MAAM,QAAU,OAC3BlG,EAAA,KAAK2F,EAAY1F,EAAA,KAAK0F,GAAU,OAAezF,IACpCA,KAAS4F,EAAM,MACzB,KAGDI,EAAW,MAAM,QAAU,QACtBjG,EAAA,KAAA0F,GAAU,KAAKG,EAAM,MAAM,EACpC,EAEJG,EAAQ,YAAYE,CAAG,CAAA,CAC1B,EACI,KAAA,IAAI,WAAWP,CAAS,CACjC,CACJ,EAjDID,EAAA,YADGnF,IAAA6E,EAAA,UAAAC,GAAA,CAJN5D,EAAU,CACP,QAAS,gBACT,UAAW,eAAA,CACd,CAAA,EACYgE,WAAA,mNCAAU,EAAAA,YAAN,cAA0BpE,CAAW,CACxC,aAAc,CACJ,OACV,CAEA,MAAM,QAAS,CACP,IAAAqE,EAAU,IAAIC,GAAmB,CACjC,OAAQ,IAAA,CACX,EACI,KAAA,IAAI,WAAWD,CAAO,CAC/B,CACJ,EAXOhB,EAAA,YAAAC,GAAA,CAJN5D,EAAU,CACP,QAAS,kBACT,UAAW,iBAAA,CACd,CAAA,EACY0E,EAAA,WAAA,EAcb,MAAME,WAA2BC,EAAc,CAC3C,YAAY5G,EAAc,CACtBA,EAAUA,GAAW,GACrBA,EAAQ,gBAAkBA,EAAQ,eAAiB,IAAM,2BAA2B,OAC5EA,EAAA,UAAaA,EAAQ,YAAc,GAC3C,MAAMA,CAAO,CACjB,CAEA,SAAS6G,EAASC,EAAa,CAC3BD,EAAG,MAAM,OAAS,OAEDC,EAAO,OAAO,OAAQvG,GAC5BA,EAAK,QAAQ,SACvB,EAEQ,QAAS4F,GAAe,CACzB,GAAA,KAAK,uBAAuBA,CAAK,EAAG,CAEhC,IAAAY,EAAM,SAAS,cAAc,KAAK,EAClCA,EAAA,IAAMZ,EAAM,QAAQ,WAAa,uBAEjC,IAAAa,EAAQ,SAAS,cAAc,GAAG,EACtCA,EAAM,UAAYb,EAAM,IAAI,OAAO,GAAKA,EAAM,IAAI,MAAM,EAEpD,IAAAE,EAAK,SAAS,cAAc,IAAI,EACpCA,EAAG,UAAY,mBAAqBF,EAAM,aAAe,cAAgB,IACzEE,EAAG,YAAYU,CAAG,EAClBV,EAAG,YAAYW,CAAK,EAEpBX,EAAG,QAAU,IAAM,CACd,KAAa,sBAAsBF,EAAOW,CAAM,CAAA,EAEpD,KAAa,eAAeT,EAAIF,CAAK,EAChC,KAAa,oBAAoBA,CAAK,GACrCE,EAAA,UAAU,IAAI,iBAAiB,EAEtCQ,EAAG,YAAYR,CAAE,EACrB,CACH,CACL,CAGA,UAAW,CAAE,CACjB,aCpEeY,GAAA,+OCgBFC,EAAAA,WAAN,cAAyB7E,CAAW,CACvC,aAAc,CACJ,OACV,CAEA,MAAM,QAAS,CACX,KAAK,MAAQ,CACT,WAAY,GACZ,MAAO,EAAA,EAEL,MAAA8E,EAAW,KAAK,IAAI,YAAY,EACtCC,GAAA,OAAOD,EAAU,cAAe,KAAK,gBAAiB,IAAI,EAC1D,KAAK,IAAI,GAAG,UAAW,KAAK,QAAQ,KAAK,IAAI,CAAC,CAClD,CAGA,gBAAgBE,EAAY,CACxB,MAAMC,EAAQ,KAAK,IAAI,cAAcD,CAAK,EACpCE,EAAa,KAAK,IAAI,+BAA+BD,CAAK,EAC5DC,IACA,KAAK,MAAM,WAAa,GAAGA,EAAW,CAAC,EAAE,QAAQ,CAAC,KAAKA,EAAW,CAAC,EAAE,QAAQ,CAAC,IAEtF,CAGA,SAAU,CACA,MAAAC,EAAQ,KAAK,YACfA,GAAS,MACT,KAAK,MAAM,MAAQ,KAAKA,EAAM,eAAe,IAErD,CAMA,UAAmB,CACT,MAAAC,EAAO,KAAK,IAAI,QAAQ,EAExBC,EAAc,KAAO,IAErBC,EAAiB,IAAO,KAC9B,IAAIC,EAAe,EAEnB,OAAIH,EAAK,cAAA,EAAgB,SAAA,GAAc,SACpBG,EAAAH,EAAK,gBAAkBA,EAAK,gBAAgB,iBAAA,EAAqBE,EAAiBD,EAElFE,EAAAH,EAAK,gBAAkBE,EAAiBD,EAGpD,KAAK,MAAME,CAAY,CAClC,CACJ,EApDOlC,EAAA,WAAAC,GAAA,CALN5D,EAAU,CACP,QAAS,gBACT,UAAW,gBAAA,SACXpB,EAAA,CACH,CAAA,EACYuG,YAAA,cChBEvG,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kNCiBFkH,EAAAA,WAAN,cAAyBxF,CAAW,CACvC,aAAc,CACJ,OACV,CAEA,MAAM,QAAS,CACX,KAAK,MAAQ,CACT,EAAG,EACH,EAAG,KACH,EAAG,CACC,EAAG,CACC,EAAG,CACP,CACJ,EACA,EAAG,CAAC,CAAC,EACL,GAAI,MACJ,GAAI,QACJ,GAAI,KAAA,CAIZ,CAEA,MAAMgF,EAAY,CACd,QAAQ,IAAIA,CAAK,EAMZ,KAAA,MAAM,EAAE,EAAI,SACrB,CAEA,YAAa,CACT,KAAK,MAAM,EAAI,KAAK,MAAM,GAAK,KAAO,KAAO,IACjD,CAEA,aAAc,CAEL,KAAA,MAAM,EAAE,EAAI,CAEb,EAAG,KAAK,MAAM,EAAE,EAAE,EAAI,CAAA,CAE9B,CAEA,WAAY,CACH,KAAA,MAAM,EAAE,KAAK,CAAC,CACvB,CAGA,KAAM,CACF,KAAK,MAAM,GACf,CAEA,MAAO,CACI,MAAA,OACX,CACJ,EAzDO3B,EAAA,WAAAC,GAAA,CANN5D,EAAU,CACP,QAAS,iBACT,UAAW,iBACX,SAAApB,EAAA,CAEH,CAAA,EACYkH,YAAA,mNCFAC,EAAAA,YAAN,cAA0BzC,EAAc,CAC3C,aAAc,CACJ,OACV,CAEA,MAAM,QAAS,CACX,MAAMI,EAAWlE,EAAU,KAAK,OAAO,IAAK,KAAK,EACjDkE,EAAI,UAAU,IAAI,EACdA,EAAA,WAAW,IAAIsC,GAAA,aAAe,EAClC,KAAK,IAAMtC,CAiEf,CACJ,EA3EOC,EAAA,YAAAC,GAAA,CALN5D,EAAU,CACP,QAAS,cACT,UAAW,cACX,UAAW,EAAA,CACd,CAAA,EACY+F,aAAA"}