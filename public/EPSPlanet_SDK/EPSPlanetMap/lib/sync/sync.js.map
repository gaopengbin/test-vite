{"version":3,"file":"sync.js","sources":["../../../src/sync/utils/math.ts","../../../src/sync/maps/ol.ts","../../../src/sync/maps/cesium.ts","../../../src/sync/maps/arcgis.ts","../../../src/sync/synchronizer.ts"],"sourcesContent":["/**\n * 弧度转角度\n * @param {number} angleInRadians 弧度\n * @return {number} 角度\n */\nexport function toDegrees(angleInRadians: number): number {\n  return angleInRadians * 180 / Math.PI;\n}\n\n\n/**\n * 角度转弧度\n * @param {number} angleInDegrees 角度\n * @return {number} 弧度\n */\nexport function toRadians(angleInDegrees: number): number {\n  return angleInDegrees * Math.PI / 180;\n}\n\n/**\n * 根据分辨率获取比例尺\n * @param resolution 分辨率\n * @returns 比例尺\n */\nexport function toScale(resolution: number): number {\n  const DEFAULT_DPI = 25.4 / 0.28; // 默认dpi\n  const inchesPerMeter = 1000 / 25.4; // 英寸每米\n  return resolution * inchesPerMeter * DEFAULT_DPI;\n}\n","import { Feature, Map } from \"ol\";\r\nimport { ProjectionLike, transform } from \"ol/proj\";\r\nimport { unByKey } from 'ol/Observable.js';\r\nimport { SyncInfo } from \"../interface\";\r\nimport { toDegrees, toRadians } from \"../utils/math\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport { Polygon } from \"ol/geom\";\r\n\r\nexport class OlSync {\r\n    #id: number;\r\n    #map: Map;//地图\r\n    #updating: boolean = false; // 是否正在更新，正在更新的不需要触发视图更改事件\r\n    #handle: any = null;\r\n    enable: boolean = true;\r\n    // #toLonLat: any;\r\n    // #fromLonLat: any;\r\n    #updateOthersMap: Function; // 更新其他地图的方法\r\n    #mapPrj: ProjectionLike; // 当前map的投影\r\n    #syncPrj: ProjectionLike = 'EPSG:4326'; // 同步工具使用的投影\r\n\r\n\r\n    constructor(map: Map, id: number, updateOthersMapFun: Function) {\r\n        this.#id = id;\r\n        this.#map = map;\r\n        this.#updateOthersMap = updateOthersMapFun;\r\n        this.#handle = map.getView().on('propertychange', () => this.#handleViewEvent());\r\n        this.#mapPrj = this.#map.getView().getProjection();\r\n    }\r\n\r\n    // id不可更改\r\n    public get id(): number {\r\n        return this.#id;\r\n    }\r\n\r\n    /**\r\n     * 地图变更事件\r\n     * @returns \r\n     */\r\n    #handleViewEvent() {\r\n        // 禁用 或 排除因为别的地图引起的视图更改事件\r\n        if (!this.enable || this.#updating) {\r\n            return;\r\n        }\r\n        this.#updateOthersMap(this);\r\n    }\r\n\r\n    /**\r\n     * 获取当前位置信息\r\n     */\r\n    public get syncInfo(): SyncInfo | undefined {\r\n        const view = this.#map.getView();\r\n        if (!view) {\r\n            return;\r\n        }\r\n        const center = view.getCenter();\r\n        if (center === undefined || center === null) {\r\n            return;\r\n        }\r\n\r\n        let resolution = view.getResolution() || 1;\r\n        const metersPerUnit = view.getProjection().getMetersPerUnit() ?? 1;\r\n        resolution = resolution * metersPerUnit;\r\n\r\n        // const lonLat = this.#toLonLat(center, undefined, undefined);\r\n        const lonLat = transform(center, this.#mapPrj, this.#syncPrj);\r\n        // console.assert(lonLat); // 断言\r\n\r\n        const rotation = toDegrees(view.getRotation());\r\n        return {\r\n            resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation, // 旋转\r\n            tilt: null,//倾斜角度 ol没有该参数\r\n            longitude: lonLat[0], // 中心经度\r\n            latitude: lonLat[1], // 中心纬度\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新地图\r\n     */\r\n    update(syncInfo: SyncInfo) {\r\n        if (!syncInfo) {\r\n            return;\r\n        }\r\n        this.#updating = true;\r\n\r\n        const view = this.#map.getView();\r\n        let metersPerUnit = view.getProjection().getMetersPerUnit() ?? 1; //每单位米数\r\n        const center = transform([syncInfo.longitude, syncInfo.latitude], this.#syncPrj, this.#mapPrj);\r\n        // view.setCenter(this.#fromLonLat([syncInfo.longitude, syncInfo.latitude]));\r\n        view.setCenter(center);\r\n\r\n        const resolution = syncInfo.resolution / metersPerUnit;\r\n        const currentResolution = view.getResolution() || 1;\r\n\r\n        // 当分辨率改变大于1/100时，再进行设置，防止卡帧\r\n        if ((Math.abs(resolution - currentResolution) / currentResolution) > 0.01) {\r\n            view.setResolution(resolution);\r\n        }\r\n\r\n        // 当旋转角度改变的弧度大于0.01时，再进行设置，防止卡帧\r\n        const rotation = toRadians(syncInfo.rotation);\r\n        if (Math.abs(rotation - view.getRotation()) > 0.01) {\r\n            view.setRotation(rotation);\r\n        }\r\n\r\n        this.#updating = false;\r\n    }\r\n\r\n    // graphic对象，用于添加或删除graphic\r\n    public graphics = {\r\n        // 添加 直接结构参数\r\n        add: ({ geometry, symbol }: any) => {\r\n            console.log(geometry);\r\n            console.log(symbol);\r\n\r\n            let feature = new Feature({\r\n                // geometry: new Polygon([[\r\n                //     [117, 45],\r\n                //     [118, 45],\r\n                //     [118, 46],\r\n                //     [117, 45],\r\n                //     [117, 45]\r\n                // ]]).transform(this.#syncPrj, this.#mapPrj)\r\n                geometry: new Polygon(geometry).transform(this.#syncPrj, this.#mapPrj),\r\n                symbol: symbol\r\n            });\r\n\r\n\r\n\r\n            const source = new VectorSource();\r\n            const vector = new VectorLayer({\r\n                source: source,\r\n                style: {\r\n                    'fill-color': 'rgba(255, 255, 255, 0.2)',\r\n                    'stroke-color': '#ffcc33',\r\n                    'stroke-width': 2,\r\n                    'circle-radius': 7,\r\n                    'circle-fill-color': '#ffcc33',\r\n                },\r\n            });\r\n            this.#map.addLayer(vector);\r\n            source.addFeature(feature);\r\n        },\r\n        remove: this.#remove,\r\n        removeAll: this.#removeAll\r\n    }\r\n\r\n    // 移除\r\n    #remove(graphic: any) {\r\n        console.log(graphic);\r\n    }\r\n\r\n    // 移除全部\r\n    #removeAll() {\r\n\r\n    }\r\n\r\n    // 销毁对象\r\n    destroy() {\r\n        unByKey(this.#handle);\r\n        this.#handle = null;\r\n    }\r\n}","// import * as Cesium from 'cesium';\r\nimport { SyncInfo } from \"../interface\";\r\nimport { toDegrees, toRadians } from '../utils/math';\r\n\r\n// let Cesium: any = (window as any).Cesium;\r\n\r\nexport class CesiumSync {\r\n    #id: number;\r\n    #viewer: any;//地图\r\n    #handles: any[] = [];\r\n    enable: boolean = true;\r\n    #lastCameraViewMatrix: any;\r\n    #canRender: boolean = false; // 可以开始渲染\r\n    #updateOthersMap: Function; // 更新其他地图的方法\r\n    #tilt3d: number = 0; // 记录视角的角度\r\n    // #dataSource: (window as any).Cesium.GeoJsonDataSource;\r\n\r\n    constructor(viewer: any, id: number, updateOthersMapFun: Function) {\r\n        this.#id = id;\r\n        this.#viewer = viewer;\r\n        this.#updateOthersMap = updateOthersMapFun;\r\n        // this.#dataSource = new (window as any).Cesium.GeoJsonDataSource();\r\n        /**\r\n         * 获取将在场景更新之后和场景呈现之前引发的事件 用该事件替换 requestAnimationFrame\r\n         * viewer.camera.changed 该方式不够灵敏 右键缩放经常不被识别\r\n         */\r\n        let handle1 = viewer.scene.preRender.addEventListener(() => {\r\n            this.#canRender && this.#checkCameraChange();\r\n        });\r\n        let handle2 = viewer.camera.moveStart.addEventListener(() => {\r\n            // 只有enable 为true时才能同步\r\n            this.#canRender = this.enable\r\n        });\r\n        let handle3 = viewer.camera.moveEnd.addEventListener(() => {\r\n            this.#canRender = false;\r\n        });\r\n        this.#handles = [\r\n            handle1,\r\n            handle2,\r\n            handle3\r\n        ];\r\n    }\r\n\r\n    // id不可更改\r\n    public get id(): number {\r\n        return this.#id;\r\n    }\r\n\r\n    // /**\r\n    //  * 更新其他地图，该方法需要被重写\r\n    //  */\r\n    // updateOthersMap(sync: any) {\r\n    //     console.log(sync);\r\n    // }\r\n\r\n    /**\r\n     * 获取当前位置信息\r\n     */\r\n    public get syncInfo(): SyncInfo | undefined {\r\n        // 三维模式\r\n        if (this.#viewer.scene.mode === (window as any).Cesium.SceneMode.SCENE3D) {\r\n            return this.#get3dSyncInfo();\r\n        }\r\n        // 二维模式\r\n        else if (this.#viewer.scene.mode === (window as any).Cesium.SceneMode.SCENE2D) {\r\n            return this.#get2dSyncInfo();\r\n        }\r\n        // 2.5维模式\r\n        else if (this.#viewer.scene.mode === (window as any).Cesium.SceneMode.COLUMBUS_VIEW) {\r\n            return this.#get2_5dSyncInfo();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 获取 2d 位置信息\r\n     * @returns \r\n     */\r\n    #get2dSyncInfo(): SyncInfo | undefined {\r\n        const scene = this.#viewer.scene;\r\n        const canvas = scene.canvas;\r\n        // 获取坐标 (弧度制)\r\n        const carto = scene.camera.positionCartographic;\r\n        const latitude = carto?.latitude || 0;\r\n        const longitude = carto?.longitude || 0;\r\n        // cesium 2d模式 是正交投影，所以用横向分辨率确定高度\r\n        const resolution = carto.height / canvas.clientWidth;\r\n        return {\r\n            resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation: 0, // 旋转\r\n            tilt: 0,//倾斜角度\r\n            longitude: toDegrees(longitude), // 中心经度 角度制\r\n            latitude: toDegrees(latitude), // 中心纬度 角度制\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取 2.5d 位置信息\r\n     * @returns \r\n     */\r\n    #get2_5dSyncInfo(): SyncInfo | undefined {\r\n        const scene = this.#viewer.scene;\r\n        const canvas = scene.canvas;\r\n        // 获取屏幕中心点的3D位置\r\n        const target = this.#pickCenterPoint(scene);\r\n        let carto;\r\n        if (!target) {\r\n            // 获取坐标 (弧度制)\r\n            carto = scene.camera.positionCartographic;\r\n        } else {\r\n            // 笛卡尔空间直角坐标系转换为WGS84\r\n            carto = (window as any).Cesium.Cartographic.fromCartesian(target);\r\n        }\r\n\r\n        let height = scene.camera.positionCartographic.height;\r\n        // 计算真实的高度\r\n        height = height / Math.sin(Math.abs(scene.camera.pitch));\r\n        const latitude = carto?.latitude || 0;\r\n        const longitude = carto?.longitude || 0;\r\n        // cesium 2.5d模式 用横向分辨率确定高度\r\n        const resolution = height / canvas.clientWidth;\r\n\r\n        const tilt = scene.camera.pitch + (window as any).Cesium.Math.PI_OVER_TWO;\r\n        return {\r\n            resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation: -toDegrees(scene.camera.heading), // 旋转\r\n            tilt: toDegrees(tilt),//倾斜角度\r\n            longitude: toDegrees(longitude), // 中心经度 角度制\r\n            latitude: toDegrees(latitude), // 中心纬度 角度制\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取 3d 位置信息\r\n     * @returns \r\n     */\r\n    #get3dSyncInfo(): SyncInfo | undefined {\r\n        const scene = this.#viewer.scene;\r\n        // 目标和距离\r\n        const ellipsoid = (window as any).Cesium.Ellipsoid.WGS84;\r\n        // 获取屏幕中心点的3D位置\r\n        const target = this.#pickCenterPoint(scene);\r\n        let rotation; // 当前位置的旋转角度\r\n        let tilt;// 当前位置的倾斜角度\r\n        let bestTarget = target;\r\n        if (!bestTarget) {\r\n\r\n            const globe = scene.globe;\r\n            const carto = scene.camera.positionCartographic.clone();\r\n            const height = globe.getHeight(carto);\r\n            carto.height = height || 0;\r\n            bestTarget = (window as any).Cesium.Ellipsoid.WGS84.cartographicToCartesian(carto);\r\n            rotation = scene.camera.heading;\r\n\r\n            tilt = scene.camera.pitch + (window as any).Cesium.Math.PI_OVER_TWO;\r\n        }\r\n        else {\r\n            // HEADING\r\n            const up = scene.camera.up;\r\n            const right = scene.camera.right;\r\n            const normal = new (window as any).Cesium.Cartesian3(-bestTarget.y, bestTarget.x, 0); // what is it?\r\n            const heading = (window as any).Cesium.Cartesian3.angleBetween(right, normal);\r\n            const cross = (window as any).Cesium.Cartesian3.cross(bestTarget, up, new (window as any).Cesium.Cartesian3());\r\n            const orientation = cross.z;\r\n            rotation = (orientation < 0 ? heading : -heading);\r\n\r\n\r\n            const pos = scene.camera.position;\r\n\r\n            // 垂直于目标处的椭球\r\n            const targetNormal = new (window as any).Cesium.Cartesian3();\r\n            ellipsoid.geocentricSurfaceNormal(bestTarget, targetNormal);\r\n\r\n            // 从目标到摄像机的矢量\r\n            const targetToCamera = new (window as any).Cesium.Cartesian3();\r\n            (window as any).Cesium.Cartesian3.subtract(pos, bestTarget, targetToCamera);\r\n            (window as any).Cesium.Cartesian3.normalize(targetToCamera, targetToCamera);\r\n            const tiltAngle = Math.acos((window as any).Cesium.Cartesian3.dot(targetNormal, targetToCamera));\r\n            tilt = isNaN(tiltAngle) ? 0 : tiltAngle;\r\n        }\r\n\r\n        const distance = (window as any).Cesium.Cartesian3.distance(bestTarget, scene.camera.position);\r\n        const bestTargetCartographic = ellipsoid.cartesianToCartographic(bestTarget);\r\n\r\n        // resolution\r\n        const latitude = bestTargetCartographic?.latitude || 0;\r\n        const longitude = bestTargetCartographic?.longitude || 0;\r\n        const resolution = this.#calcResolutionForDistance(distance, latitude, scene);\r\n\r\n        this.#tilt3d = tilt;\r\n        return {\r\n            resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation: toDegrees(rotation), // 旋转\r\n            tilt: toDegrees(tilt),//倾斜角度\r\n            longitude: toDegrees(longitude), // 中心经度 角度制\r\n            latitude: toDegrees(latitude), // 中心纬度 角度制\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取画布给定像素的3D位置\r\n     * @param scene \r\n     * @param pixel \r\n     * @returns \r\n     */\r\n    #pickOnTerrainOrEllipsoid(scene: any, pixel: any) {\r\n        const ray = scene.camera.getPickRay(pixel);\r\n        const target = scene.globe.pick(ray, scene);\r\n        return target || scene.camera.pickEllipsoid(pixel);\r\n    };\r\n    /**\r\n     * 获取屏幕中心点的3D位置\r\n     * @param scene \r\n     * @returns \r\n     */\r\n    #pickCenterPoint(scene: any) {\r\n        const canvas = scene.canvas;\r\n        const center = new (window as any).Cesium.Cartesian2(\r\n            canvas.clientWidth / 2,\r\n            canvas.clientHeight / 2);\r\n        return this.#pickOnTerrainOrEllipsoid(scene, center);\r\n    };\r\n\r\n    /**\r\n     * 更新地图\r\n     */\r\n    update(syncInfo: SyncInfo) {\r\n        if (!syncInfo) {\r\n            return;\r\n        }\r\n\r\n        switch (this.#viewer.scene.mode) {\r\n            case (window as any).Cesium.SceneMode.SCENE3D:\r\n                this.#update3d(syncInfo);\r\n                break;\r\n            case (window as any).Cesium.SceneMode.SCENE2D:\r\n                this.#update2d(syncInfo);\r\n                break;\r\n            case (window as any).Cesium.SceneMode.COLUMBUS_VIEW:\r\n                this.#update2_5d(syncInfo);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // 记录相机状态\r\n        this.#checkCameraChange(true);\r\n    }\r\n\r\n\r\n    /**\r\n     * 更新2D地图\r\n     * @param syncInfo \r\n     */\r\n    #update2d(syncInfo: SyncInfo) {\r\n        const scene = this.#viewer.scene;\r\n        const canvas = scene.canvas;\r\n        // cesium 2d模式 是正交投影，所以用横向分辨率确定高度\r\n        const height = syncInfo.resolution * canvas.clientWidth;\r\n        scene.camera.setView({\r\n            destination: (window as any).Cesium.Cartesian3.fromDegrees(syncInfo.longitude, syncInfo.latitude, height)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 更新2.5D地图\r\n     * @param syncInfo \r\n     */\r\n    #update2_5d(syncInfo: SyncInfo) {\r\n        const scene = this.#viewer.scene;\r\n        const canvas = scene.canvas;\r\n        const pitch = syncInfo.tilt === null ? scene.camera.pitch : toRadians(syncInfo.tilt - 90);\r\n\r\n        let absPitch = Math.abs(pitch); // 俯仰角的绝对值\r\n        // cesium 2.5d模式 用横向分辨率确定高度\r\n        const height = syncInfo.resolution * canvas.clientWidth / Math.sin(absPitch);\r\n        // const tilt = syncInfo.tilt ?? 0;\r\n        const rotation = -toRadians(syncInfo.rotation);\r\n        const destination = (window as any).Cesium.Cartesian3.fromDegrees(syncInfo.longitude, syncInfo.latitude, height);\r\n        scene.camera.setView({\r\n            destination,\r\n            orientation: {\r\n                heading: rotation,// 朝向\r\n                pitch,// 俯仰\r\n                roll: undefined\r\n            }\r\n        });\r\n        // 平移相机\r\n        scene.camera.moveDown(height * Math.cos(absPitch));\r\n    }\r\n\r\n    /**\r\n     * 更新三维地图\r\n     * @param syncInfo \r\n     */\r\n    #update3d(syncInfo: SyncInfo) {\r\n        const scene = this.#viewer.scene;\r\n        const carto = new (window as any).Cesium.Cartographic(toRadians(syncInfo.longitude), toRadians(syncInfo.latitude));\r\n        if (scene.globe) {\r\n            const height = scene.globe.getHeight(carto);\r\n            carto.height = height || 0;\r\n        }\r\n\r\n        const destination = (window as any).Cesium.Ellipsoid.WGS84.cartographicToCartesian(carto);\r\n\r\n        const rotation = -toRadians(syncInfo.rotation);\r\n\r\n        const pitch = syncInfo.tilt === null ? this.#tilt3d - (window as any).Cesium.Math.PI_OVER_TWO : toRadians(syncInfo.tilt - 90);\r\n        const orientation = {\r\n            pitch,\r\n            heading: rotation, // 朝向\r\n            roll: undefined // 翻滚\r\n        };\r\n        scene.camera.setView({\r\n            destination,\r\n            orientation\r\n        });\r\n        const distance = this.#calcDistanceForResolution(\r\n            syncInfo.resolution, toRadians(syncInfo.latitude),\r\n            scene\r\n        );\r\n        this.#tilt3d = pitch + (window as any).Cesium.Math.PI_OVER_TWO;\r\n        scene.camera.moveBackward(distance);\r\n    }\r\n\r\n    /**\r\n     * 检查基础相机状态是否已更改，如果更改则并同步\r\n     * 检查完成后需要记录相机状态\r\n     * @param {boolean=} opt_dontSync 不要同步视图,只需要记录当前状态\r\n     */\r\n    #checkCameraChange(opt_dontSync: boolean = false) {\r\n        const old = this.#lastCameraViewMatrix;\r\n        const current = this.#viewer.camera.viewMatrix;\r\n        if (!old || !(window as any).Cesium.Matrix4.equalsEpsilon(old, current, 1e-5)) {\r\n            this.#lastCameraViewMatrix = current.clone();\r\n            if (opt_dontSync !== true) {\r\n                this.#updateOthersMap(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 销毁对象\r\n    destroy() {\r\n        this.#handles.forEach(item => {\r\n            item();\r\n        });\r\n        this.#handles = [];\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据分辨率和纬度值计算摄像机和中心点之间的距离\r\n     * @param resolution \r\n     * @param latitude 弧度制\r\n     * @param scene \r\n     * @param metersPerUnit \r\n     * @returns \r\n     */\r\n    #calcDistanceForResolution(\r\n        resolution: number,\r\n        latitude: number,\r\n        scene: {\r\n            canvas: any;\r\n            camera: any;\r\n        }\r\n    ): number {\r\n        const canvas = scene.canvas;\r\n        const camera = scene.camera;\r\n        let fovy = camera.frustum.fovy; // vertical field of view\r\n        console.assert(!isNaN(fovy));\r\n\r\n        // number of \"map units\" visible in 2D (vertically)\r\n        const visibleMapUnits = resolution * canvas.clientHeight;\r\n\r\n        // The metersPerUnit does not take latitude into account, but it should\r\n        // be lower with increasing latitude -- we have to compensate.\r\n        // In 3D it is not possible to maintain the resolution at more than one point,\r\n        // so it only makes sense to use the latitude of the \"target\" point.\r\n        const relativeCircumference = Math.cos(Math.abs(latitude));\r\n\r\n        // how many meters should be visible in 3D\r\n        const visibleMeters = visibleMapUnits * relativeCircumference;\r\n\r\n        // distance required to view the calculated length in meters\r\n        //\r\n        //  fovy/2\r\n        //    |\\\r\n        //  x | \\\r\n        //    |--\\\r\n        // visibleMeters/2\r\n        const requiredDistance = (visibleMeters / 2) / Math.tan(fovy / 2);\r\n\r\n        // NOTE: This calculation is not absolutely precise, because metersPerUnit\r\n        // is a great simplification. It does not take ellipsoid/terrain into account.\r\n\r\n        return requiredDistance;\r\n    }\r\n    /**\r\n     * 根据距离（相机到位置）和纬度值计算分辨率\r\n     * @param distance \r\n     * @param latitude 弧度制\r\n     * @param scene \r\n     * @param metersPerUnit \r\n     * @returns \r\n     */\r\n    #calcResolutionForDistance(\r\n        distance: number,\r\n        latitude: number,\r\n        scene: {\r\n            canvas: any;\r\n            camera: any;\r\n        }\r\n    ): number {\r\n        // See the reverse calculation (calcDistanceForResolution) for details\r\n        const canvas = scene.canvas;\r\n        const camera = scene.camera;\r\n        let fovy = camera.frustum.fovy || 1; // vertical field of view\r\n        console.assert(!isNaN(fovy));\r\n\r\n        const visibleMeters = 2 * distance * Math.tan(fovy / 2);\r\n        const relativeCircumference = Math.cos(Math.abs(latitude));\r\n        const visibleMapUnits = visibleMeters / relativeCircumference;\r\n        const resolution = visibleMapUnits / canvas.clientHeight;\r\n\r\n        return resolution;\r\n    }\r\n}","import SceneView from \"@arcgis/core/views/SceneView\";\r\nimport MapView from \"@arcgis/core/views/MapView\";\r\nimport { SyncInfo } from \"../interface\";\r\nimport { toScale } from \"../utils/math\";\r\n\r\nexport class ArcgisSync {\r\n    #id: number;\r\n    #map: MapView | SceneView;//地图\r\n    #updating: boolean = false; // 是否正在更新，正在更新的不需要触发视图更改事件\r\n    #viewpointWatchHandle: any = null;\r\n    #interactWatcher: any = null;\r\n    enable: boolean = true;\r\n    #updateOthersMap: Function; // 更新其他地图的方法\r\n\r\n\r\n    constructor(view: MapView | SceneView, id: number, updateOthersMapFun: Function) {\r\n        this.#id = id;\r\n        this.#map = view;\r\n        this.#updateOthersMap = updateOthersMapFun;\r\n\r\n        // 监视交互和动画\r\n        this.#interactWatcher = view.watch(\"interacting,animation\", (value: any) => {\r\n            // 不需要重复监听\r\n            if (!value || this.#viewpointWatchHandle) {\r\n                return;\r\n            }\r\n            this.#viewpointWatchHandle = view.watch(\"viewpoint\", () => {\r\n                this.#handleViewEvent();\r\n            });\r\n        });\r\n    }\r\n\r\n    // id不可更改\r\n    public get id(): number {\r\n        return this.#id;\r\n    }\r\n\r\n    /**\r\n     * 地图变更事件\r\n     * @returns \r\n     */\r\n    #handleViewEvent() {\r\n        // 禁用 或 排除因为别的地图引起的视图更改事件\r\n        if (!this.enable || this.#updating) {\r\n            return;\r\n        }\r\n        this.#updateOthersMap(this);\r\n    }\r\n\r\n    /**\r\n     * 获取当前位置信息\r\n     */\r\n    public get syncInfo(): SyncInfo | undefined {\r\n        const view = this.#map;\r\n        let rotation;\r\n        let tilt = null;\r\n        if (this.#isSceneView(view)) {\r\n            rotation = -view.camera.heading;\r\n            tilt = view.camera.tilt;\r\n        }\r\n        else {\r\n            rotation = view.rotation;\r\n        }\r\n\r\n        const longitude = view.center.longitude || 0;\r\n        const latitude = view.center.latitude || 0;\r\n\r\n        return {\r\n            resolution: view.resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation, // 旋转\r\n            tilt,//倾斜角度 2d没有该参数\r\n            longitude, // 中心经度\r\n            latitude, // 中心纬度\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 判断是否为SceneView\r\n     */\r\n    #isSceneView(view: MapView | SceneView): view is SceneView {\r\n        return view.type === '3d';\r\n    }\r\n\r\n    /**\r\n     * 更新地图\r\n     */\r\n    async update(syncInfo: SyncInfo) {\r\n        if (!syncInfo) {\r\n            return;\r\n        }\r\n        this.#clear(); // 移除监听\r\n\r\n        const view = this.#map;\r\n        // 尽量不使用new 避免打包\r\n        // const center = new Point({\r\n        //     longitude: syncInfo.longitude,\r\n        //     latitude: syncInfo.latitude\r\n        // });\r\n        const center: any = {\r\n            type: \"point\", // autocasts as new Point()\r\n            longitude: syncInfo.longitude,\r\n            latitude: syncInfo.latitude\r\n        };\r\n\r\n        view.center = center;\r\n        // view.scale = view.scale / view.resolution * syncInfo.resolution;\r\n\r\n        view.scale = toScale(syncInfo.resolution);// arcgis 2d模式下因为存在lod，可能不一致\r\n\r\n        if (this.#isSceneView(view)) {\r\n            view.camera.heading = -syncInfo.rotation;\r\n            view.camera.tilt = syncInfo.tilt ?? view.camera.tilt;\r\n        }\r\n        else {\r\n            view.rotation = syncInfo.rotation;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除监听\r\n     */\r\n    #clear() {\r\n        if (this.#viewpointWatchHandle) {\r\n            this.#viewpointWatchHandle?.remove();\r\n            this.#viewpointWatchHandle = null;\r\n        }\r\n    }\r\n\r\n    // 销毁对象\r\n    destroy() {\r\n        this.#clear();\r\n        this.#interactWatcher?.remove();\r\n        this.#interactWatcher = null;\r\n    }\r\n}","import { OlSync } from \"./maps/ol\";\r\nimport { CesiumSync } from \"./maps/cesium\";\r\nimport { ArcgisSync } from \"./maps/arcgis\";\r\nimport { SyncInfo } from \"./interface\";\r\n\r\n/** 参数 */\r\ninterface Options {\r\n    // 是否启用同步\r\n    enable: boolean,\r\n    // 是否同步切片\r\n    // 是否同步矢量\r\n}\r\n\r\n\r\n// openlayers 与 cesium 的同步器\r\nexport class Synchronizer {\r\n    // [x: string]: any; // 任意的string索引List\r\n    #mapSyncs: any[] = [];\r\n    #id: number = 1;\r\n\r\n    constructor(_maps: any[], options?: Options) {\r\n        // 添加默认参数\r\n        this.enable = options?.enable ?? true;\r\n        _maps.forEach(map => {\r\n            this.addMap(map);\r\n        })\r\n    }\r\n\r\n    //是否启用同步\r\n    #enable: boolean = false;\r\n    public set enable(enable: boolean) {\r\n        if (this.#enable === enable) {\r\n            return;\r\n        }\r\n        this.#enable = enable;\r\n    }\r\n    public get enable(): boolean {\r\n        return this.#enable;\r\n    }\r\n\r\n\r\n    // 添加地图\r\n    public addMap(map: any) {\r\n        const MapSync = this.#getMapSync(map);\r\n        const id = this.#id++;\r\n        // 添加到同步\r\n        const mapSync = new MapSync(map, id, this.#updateAll.bind(this));\r\n        this.#mapSyncs.push(mapSync);\r\n    }\r\n\r\n    /**\r\n     * 更新除发出事件的所有其他的地图\r\n     */\r\n    #updateAll(sync: any) {\r\n        if (!this.enable) {\r\n            return;\r\n        }\r\n        const syncInfo: SyncInfo = sync.syncInfo;\r\n        if (!syncInfo) {\r\n            return;\r\n        }\r\n        const mapSyncs = this.#mapSyncs.filter(item => item.id !== sync.id);\r\n        mapSyncs.forEach(item => {\r\n            item?.update(syncInfo);\r\n        });\r\n    }\r\n\r\n\r\n    // 删除地图\r\n    public removeMap(map: any) {\r\n        if (this.enable) {\r\n            map.enableSynchronizer = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取地图同步器的构造函数\r\n     * @param map \r\n     * @returns \r\n     */\r\n    #getMapSync(map: any) {\r\n        if (map.ol_uid) {\r\n            /** ol相关方法 */\r\n            return OlSync;\r\n        }\r\n        else if (map.cesiumWidget) {\r\n            /** cesium 相关方法 */\r\n            return CesiumSync;\r\n        }\r\n        else if (map.map?.basemap) {\r\n            /** arcgis 相关方法 */\r\n            return ArcgisSync;\r\n        }\r\n\r\n        throw new Error(\"cannot get map type\");\r\n    }\r\n\r\n\r\n    public graphics = {\r\n        add: (graphic: any) => {\r\n            this.#mapSyncs.forEach(item => {\r\n                item?.graphics?.add(graphic);\r\n            });\r\n        },\r\n        remove: (graphic: any) => {\r\n            this.#mapSyncs.forEach(item => {\r\n                item?.graphics?.remove(graphic);\r\n            });\r\n        },\r\n        removeAll: () => {\r\n            this.#mapSyncs.forEach(item => {\r\n                item?.graphics?.removeAll();\r\n            });\r\n        },\r\n    }\r\n\r\n    // 高亮\r\n    public highlight(graphic: any) {\r\n        this.#mapSyncs.forEach(item => {\r\n            item?.highlight(graphic);\r\n        });\r\n    }\r\n\r\n    // 移除高亮\r\n    public unhighlight(graphic: any) {\r\n        this.#mapSyncs.forEach(item => {\r\n            item?.unhighlight(graphic);\r\n        });\r\n    }\r\n\r\n    public unHighlightAll(graphic: any) {\r\n        this.#mapSyncs.forEach(item => {\r\n            item?.unhighlight(graphic);\r\n        });\r\n    }\r\n\r\n    // 移除全部高亮\r\n\r\n}\r\n\r\n"],"names":["toDegrees","angleInRadians","toRadians","angleInDegrees","toScale","resolution","DEFAULT_DPI","inchesPerMeter","OlSync","map","id","updateOthersMapFun","__privateAdd","_handleViewEvent","_remove","_removeAll","_id","_map","_updating","_handle","__publicField","_updateOthersMap","_mapPrj","_syncPrj","geometry","symbol","feature","Feature","Polygon","__privateGet","source","VectorSource","vector","VectorLayer","__privateMethod","remove_fn","removeAll_fn","__privateSet","handleViewEvent_fn","view","center","metersPerUnit","lonLat","transform","rotation","syncInfo","currentResolution","unByKey","graphic","CesiumSync","viewer","_get2dSyncInfo","_get2_5dSyncInfo","_get3dSyncInfo","_pickOnTerrainOrEllipsoid","_pickCenterPoint","_update2d","_update2_5d","_update3d","_checkCameraChange","_calcDistanceForResolution","_calcResolutionForDistance","_viewer","_handles","_lastCameraViewMatrix","_canRender","_tilt3d","handle1","checkCameraChange_fn","handle2","handle3","get3dSyncInfo_fn","get2dSyncInfo_fn","get2_5dSyncInfo_fn","update3d_fn","update2d_fn","update2_5d_fn","item","scene","canvas","carto","latitude","longitude","target","pickCenterPoint_fn","height","tilt","ellipsoid","bestTarget","up","right","normal","heading","pos","targetNormal","targetToCamera","tiltAngle","globe","distance","bestTargetCartographic","calcResolutionForDistance_fn","pickOnTerrainOrEllipsoid_fn","pixel","ray","pitch","absPitch","destination","orientation","calcDistanceForResolution_fn","opt_dontSync","old","current","fovy","visibleMapUnits","relativeCircumference","visibleMeters","ArcgisSync","_isSceneView","_clear","_viewpointWatchHandle","_interactWatcher","value","isSceneView_fn","clear_fn","_a","Synchronizer","_maps","options","_updateAll","_getMapSync","_mapSyncs","_enable","enable","MapSync","getMapSync_fn","__privateWrapper","mapSync","updateAll_fn","sync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAKO,SAASA,EAAUC,GAAgC;AACjD,SAAAA,IAAiB,MAAM,KAAK;AACrC;AAQO,SAASC,EAAUC,GAAgC;AACjD,SAAAA,IAAiB,KAAK,KAAK;AACpC;AAOO,SAASC,GAAQC,GAA4B;AAClD,QAAMC,IAAc,kBACdC,IAAiB,MAAO;AAC9B,SAAOF,IAAaE,IAAiBD;AACvC;;ACnBO,MAAME,GAAO;AAAA;AAAA,EAahB,YAAYC,GAAUC,GAAYC,GAA8B;AAiBhE;AAAA;AAAA;AAAA;AAAA,IAAAC,EAAA,MAAAC;AA+GA;AAAA,IAAAD,EAAA,MAAAE;AAKA;AAAA,IAAAF,EAAA,MAAAG;AAjJA,IAAAH,EAAA,MAAAI,GAAA;AACA,IAAAJ,EAAA,MAAAK,GAAA;AACA;AAAA,IAAAL,EAAA,MAAAM,GAAqB;AACrB;AAAA,IAAAN,EAAA,MAAAO,GAAe;AACf,IAAAC,EAAA,gBAAkB;AAGlB;AAAA;AAAA,IAAAR,EAAA,MAAAS,GAAA;AACA;AAAA,IAAAT,EAAA,MAAAU,GAAA;AACA;AAAA,IAAAV,EAAA,MAAAW,GAA2B;AA4FpB;AAAA,IAAAH,EAAA,kBAAW;AAAA;AAAA,MAEd,KAAK,CAAC,EAAE,UAAAI,GAAU,QAAAC,QAAkB;AAChC,gBAAQ,IAAID,CAAQ,GACpB,QAAQ,IAAIC,CAAM;AAEd,YAAAC,IAAU,IAAIC,GAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQtB,UAAU,IAAIC,GAAQJ,CAAQ,EAAE,UAAUK,EAAA,MAAKN,IAAUM,EAAA,MAAKP,EAAO;AAAA,UACrE,QAAAG;AAAA,QAAA,CACH;AAIK,cAAAK,IAAS,IAAIC,MACbC,IAAS,IAAIC,GAAY;AAAA,UAC3B,QAAAH;AAAA,UACA,OAAO;AAAA,YACH,cAAc;AAAA,YACd,gBAAgB;AAAA,YAChB,gBAAgB;AAAA,YAChB,iBAAiB;AAAA,YACjB,qBAAqB;AAAA,UACzB;AAAA,QAAA,CACH;AACI,QAAAD,EAAA,MAAAZ,GAAK,SAASe,CAAM,GACzBF,EAAO,WAAWJ,CAAO;AAAA,MAC7B;AAAA,MACA,QAAQQ,EAAA,MAAKpB,GAAAqB;AAAA,MACb,WAAWD,EAAA,MAAKnB,GAAAqB;AAAA,IAAA;AA3HhB,IAAAC,EAAA,MAAKrB,GAAMN,IACX2B,EAAA,MAAKpB,GAAOR,IACZ4B,EAAA,MAAKhB,GAAmBV,IACnB0B,EAAA,MAAAlB,GAAUV,EAAI,QAAQ,EAAE,GAAG,kBAAkB,MAAMyB,EAAA,MAAKrB,GAAAyB,IAAL,UAAuB,IAC/ED,EAAA,MAAKf,GAAUO,EAAA,MAAKZ,GAAK,QAAA,EAAU;EACvC;AAAA;AAAA,EAGA,IAAW,KAAa;AACpB,WAAOY,EAAA,MAAKb;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAiBA,IAAW,WAAiC;AAClC,UAAAuB,IAAOV,EAAA,MAAKZ,GAAK,QAAQ;AAC/B,QAAI,CAACsB;AACD;AAEE,UAAAC,IAASD,EAAK;AAChB,QAAwBC,KAAW;AACnC;AAGA,QAAAnC,IAAakC,EAAK,cAAA,KAAmB;AACzC,UAAME,IAAgBF,EAAK,cAAc,EAAE,sBAAsB;AACjE,IAAAlC,IAAaA,IAAaoC;AAG1B,UAAMC,IAASC,GAAUH,GAAQX,EAAA,MAAKP,IAASO,EAAA,MAAKN,EAAQ,GAGtDqB,IAAW5C,EAAUuC,EAAK,YAAa,CAAA;AACtC,WAAA;AAAA,MACH,YAAAlC;AAAA;AAAA,MACA,UAAAuC;AAAA;AAAA,MACA,MAAM;AAAA;AAAA,MACN,WAAWF,EAAO,CAAC;AAAA;AAAA,MACnB,UAAUA,EAAO,CAAC;AAAA;AAAA,IAAA;AAAA,EAE1B;AAAA;AAAA;AAAA;AAAA,EAKA,OAAOG,GAAoB;AACvB,QAAI,CAACA;AACD;AAEJ,IAAAR,EAAA,MAAKnB,GAAY;AAEX,UAAAqB,IAAOV,EAAA,MAAKZ,GAAK,QAAQ;AAC/B,QAAIwB,IAAgBF,EAAK,cAAc,EAAE,sBAAsB;AACzD,UAAAC,IAASG,GAAU,CAACE,EAAS,WAAWA,EAAS,QAAQ,GAAGhB,EAAA,MAAKN,IAAUM,EAAA,MAAKP,EAAO;AAE7F,IAAAiB,EAAK,UAAUC,CAAM;AAEf,UAAAnC,IAAawC,EAAS,aAAaJ,GACnCK,IAAoBP,EAAK,cAAA,KAAmB;AAGlD,IAAK,KAAK,IAAIlC,IAAayC,CAAiB,IAAIA,IAAqB,QACjEP,EAAK,cAAclC,CAAU;AAI3B,UAAAuC,IAAW1C,EAAU2C,EAAS,QAAQ;AAC5C,IAAI,KAAK,IAAID,IAAWL,EAAK,YAAY,CAAC,IAAI,QAC1CA,EAAK,YAAYK,CAAQ,GAG7BP,EAAA,MAAKnB,GAAY;AAAA,EACrB;AAAA;AAAA,EAoDA,UAAU;AACN,IAAA6B,GAAQlB,EAAA,MAAKV,EAAO,GACpBkB,EAAA,MAAKlB,GAAU;AAAA,EACnB;AACJ;AA1JIH,IAAA,eACAC,IAAA,eACAC,IAAA,eACAC,IAAA,eAIAE,IAAA,eACAC,IAAA,eACAC,IAAA,eAoBAV,IAAA,eAAAyB,KAAmB,WAAA;AAEf,EAAI,CAAC,KAAK,UAAUT,EAAA,MAAKX,MAGzBW,EAAA,MAAKR,GAAL,WAAsB;AAC1B,GAyGAP,IAAA,eAAAqB,cAAQa,GAAc;AAClB,UAAQ,IAAIA,CAAO;AACvB,GAGAjC,IAAA,eAAAqB,KAAa,WAAA;AAEb;;ACvJG,MAAMa,GAAW;AAAA;AAAA;AAAA,EAWpB,YAAYC,GAAaxC,GAAYC,GAA8B;AA8DnE;AAAA;AAAA;AAAA;AAAA,IAAAC,EAAA,MAAAuC;AAsBA;AAAA;AAAA;AAAA;AAAA,IAAAvC,EAAA,MAAAwC;AAoCA;AAAA;AAAA;AAAA;AAAA,IAAAxC,EAAA,MAAAyC;AAqEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAzC,EAAA,MAAA0C;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA1C,EAAA,MAAA2C;AAuCA;AAAA;AAAA;AAAA;AAAA,IAAA3C,EAAA,MAAA4C;AAcA;AAAA;AAAA;AAAA;AAAA,IAAA5C,EAAA,MAAA6C;AA2BA;AAAA;AAAA;AAAA;AAAA,IAAA7C,EAAA,MAAA8C;AAmCA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA9C,EAAA,MAAA+C;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA/C,EAAA,MAAAgD;AA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAhD,EAAA,MAAAiD;AA/YA,IAAAjD,EAAA,MAAAI,GAAA;AACA,IAAAJ,EAAA,MAAAkD,GAAA;AACA;AAAA,IAAAlD,EAAA,MAAAmD,GAAkB,CAAA;AAClB,IAAA3C,EAAA,gBAAkB;AAClB,IAAAR,EAAA,MAAAoD,GAAA;AACA,IAAApD,EAAA,MAAAqD,GAAsB;AACtB;AAAA,IAAArD,EAAA,MAAAS,GAAA;AACA;AAAA,IAAAT,EAAA,MAAAsD,GAAkB;AAId,IAAA7B,EAAA,MAAKrB,GAAMN,IACX2B,EAAA,MAAKyB,GAAUZ,IACfb,EAAA,MAAKhB,GAAmBV;AAMxB,QAAIwD,IAAUjB,EAAO,MAAM,UAAU,iBAAiB,MAAM;AACnD,MAAArB,EAAA,MAAAoC,MAAc/B,EAAA,MAAKyB,GAAAS,IAAL;AAAA,IAAwB,CAC9C,GACGC,IAAUnB,EAAO,OAAO,UAAU,iBAAiB,MAAM;AAEzD,MAAAb,EAAA,MAAK4B,GAAa,KAAK;AAAA,IAAA,CAC1B,GACGK,IAAUpB,EAAO,OAAO,QAAQ,iBAAiB,MAAM;AACvD,MAAAb,EAAA,MAAK4B,GAAa;AAAA,IAAA,CACrB;AACD,IAAA5B,EAAA,MAAK0B,GAAW;AAAA,MACZI;AAAA,MACAE;AAAA,MACAC;AAAA,IAAA;AAAA,EAER;AAAA;AAAA,EAGA,IAAW,KAAa;AACpB,WAAOzC,EAAA,MAAKb;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAW,WAAiC;AAExC,QAAIa,EAAA,MAAKiC,GAAQ,MAAM,SAAU,OAAe,OAAO,UAAU;AAC7D,aAAO5B,EAAA,MAAKmB,GAAAkB,IAAL;AACX,QAES1C,EAAA,MAAKiC,GAAQ,MAAM,SAAU,OAAe,OAAO,UAAU;AAClE,aAAO5B,EAAA,MAAKiB,GAAAqB,IAAL;AACX,QAES3C,EAAA,MAAKiC,GAAQ,MAAM,SAAU,OAAe,OAAO,UAAU;AAClE,aAAO5B,EAAA,MAAKkB,GAAAqB,IAAL;AAAA,EAIf;AAAA;AAAA;AAAA;AAAA,EA0JA,OAAO5B,GAAoB;AACvB,QAAKA,GAIG;AAAA,cAAAhB,EAAA,MAAKiC,GAAQ,MAAM,MAAM;AAAA,QAC7B,KAAM,OAAe,OAAO,UAAU;AAClC,UAAA5B,EAAA,MAAKwB,GAAAgB,IAAL,WAAe7B;AACf;AAAA,QACJ,KAAM,OAAe,OAAO,UAAU;AAClC,UAAAX,EAAA,MAAKsB,GAAAmB,IAAL,WAAe9B;AACf;AAAA,QACJ,KAAM,OAAe,OAAO,UAAU;AAClC,UAAAX,EAAA,MAAKuB,GAAAmB,IAAL,WAAiB/B;AACjB;AAAA,MAGR;AAGA,MAAAX,EAAA,MAAKyB,GAAAS,IAAL,WAAwB;AAAA;AAAA,EAC5B;AAAA;AAAA,EA+FA,UAAU;AACD,IAAAvC,EAAA,MAAAkC,GAAS,QAAQ,CAAQc,MAAA;AACrB,MAAAA;IAAA,CACR,GACDxC,EAAA,MAAK0B,GAAW;EACpB;AA+EJ;AApaI/C,IAAA,eACA8C,IAAA,eACAC,IAAA,eAEAC,IAAA,eACAC,IAAA,eACA5C,IAAA,eACA6C,IAAA,eAiEAf,IAAA,eAAAqB,KAAuC,WAAA;AAC7B,QAAAM,IAAQjD,EAAA,MAAKiC,GAAQ,OACrBiB,IAASD,EAAM,QAEfE,IAAQF,EAAM,OAAO,sBACrBG,KAAWD,KAAA,gBAAAA,EAAO,aAAY,GAC9BE,KAAYF,KAAA,gBAAAA,EAAO,cAAa;AAG/B,SAAA;AAAA,IACH,YAFeA,EAAM,SAASD,EAAO;AAAA;AAAA,IAGrC,UAAU;AAAA;AAAA,IACV,MAAM;AAAA;AAAA,IACN,WAAW/E,EAAUkF,CAAS;AAAA;AAAA,IAC9B,UAAUlF,EAAUiF,CAAQ;AAAA;AAAA,EAAA;AAEpC,GAMA7B,IAAA,eAAAqB,KAAyC,WAAA;AAC/B,QAAAK,IAAQjD,EAAA,MAAKiC,GAAQ,OACrBiB,IAASD,EAAM,QAEfK,IAASjD,EAAA,MAAKqB,GAAA6B,IAAL,WAAsBN;AACjC,MAAAE;AACJ,EAAKG,IAKDH,IAAS,OAAe,OAAO,aAAa,cAAcG,CAAM,IAHhEH,IAAQF,EAAM,OAAO;AAMrB,MAAAO,IAASP,EAAM,OAAO,qBAAqB;AAEtC,EAAAO,IAAAA,IAAS,KAAK,IAAI,KAAK,IAAIP,EAAM,OAAO,KAAK,CAAC;AACjD,QAAAG,KAAWD,KAAA,gBAAAA,EAAO,aAAY,GAC9BE,KAAYF,KAAA,gBAAAA,EAAO,cAAa,GAEhC3E,IAAagF,IAASN,EAAO,aAE7BO,IAAOR,EAAM,OAAO,QAAS,OAAe,OAAO,KAAK;AACvD,SAAA;AAAA,IACH,YAAAzE;AAAA;AAAA,IACA,UAAU,CAACL,EAAU8E,EAAM,OAAO,OAAO;AAAA;AAAA,IACzC,MAAM9E,EAAUsF,CAAI;AAAA;AAAA,IACpB,WAAWtF,EAAUkF,CAAS;AAAA;AAAA,IAC9B,UAAUlF,EAAUiF,CAAQ;AAAA;AAAA,EAAA;AAEpC,GAMA5B,IAAA,eAAAkB,KAAuC,WAAA;AAC7B,QAAAO,IAAQjD,EAAA,MAAKiC,GAAQ,OAErByB,IAAa,OAAe,OAAO,UAAU,OAE7CJ,IAASjD,EAAA,MAAKqB,GAAA6B,IAAL,WAAsBN;AACjC,MAAAlC,GACA0C,GACAE,IAAaL;AACjB,MAAKK,GAWA;AAEK,UAAAC,KAAKX,EAAM,OAAO,IAClBY,IAAQZ,EAAM,OAAO,OACrBa,KAAS,IAAK,OAAe,OAAO,WAAW,CAACH,EAAW,GAAGA,EAAW,GAAG,CAAC,GAC7EI,KAAW,OAAe,OAAO,WAAW,aAAaF,GAAOC,EAAM;AAGhE,IAAA/C,IAFG,OAAe,OAAO,WAAW,MAAM4C,GAAYC,IAAI,IAAK,OAAe,OAAO,WAAY,CAAA,EACnF,IACA,IAAIG,KAAU,CAACA;AAGnC,UAAAC,KAAMf,EAAM,OAAO,UAGnBgB,KAAe,IAAK,OAAe,OAAO,WAAW;AACjD,IAAAP,EAAA,wBAAwBC,GAAYM,EAAY;AAG1D,UAAMC,IAAiB,IAAK,OAAe,OAAO,WAAW;AAC5D,WAAe,OAAO,WAAW,SAASF,IAAKL,GAAYO,CAAc,GACzE,OAAe,OAAO,WAAW,UAAUA,GAAgBA,CAAc;AACpE,UAAAC,KAAY,KAAK,KAAM,OAAe,OAAO,WAAW,IAAIF,IAAcC,CAAc,CAAC;AACxF,IAAAT,IAAA,MAAMU,EAAS,IAAI,IAAIA;AAAA,SAjCjB;AAEb,UAAMC,KAAQnB,EAAM,OACdE,IAAQF,EAAM,OAAO,qBAAqB,MAAM,GAChDO,KAASY,GAAM,UAAUjB,CAAK;AACpC,IAAAA,EAAM,SAASK,MAAU,GACzBG,IAAc,OAAe,OAAO,UAAU,MAAM,wBAAwBR,CAAK,GACjFpC,IAAWkC,EAAM,OAAO,SAExBQ,IAAOR,EAAM,OAAO,QAAS,OAAe,OAAO,KAAK;AAAA;AA2BtD,QAAAoB,IAAY,OAAe,OAAO,WAAW,SAASV,GAAYV,EAAM,OAAO,QAAQ,GACvFqB,IAAyBZ,EAAU,wBAAwBC,CAAU,GAGrEP,KAAWkB,KAAA,gBAAAA,EAAwB,aAAY,GAC/CjB,MAAYiB,KAAA,gBAAAA,EAAwB,cAAa,GACjD9F,KAAa6B,EAAA,MAAK2B,IAAAuC,IAAL,WAAgCF,GAAUjB,GAAUH;AAEvE,SAAAzC,EAAA,MAAK6B,GAAUoB,IACR;AAAA,IACH,YAAAjF;AAAA;AAAA,IACA,UAAUL,EAAU4C,CAAQ;AAAA;AAAA,IAC5B,MAAM5C,EAAUsF,CAAI;AAAA;AAAA,IACpB,WAAWtF,EAAUkF,EAAS;AAAA;AAAA,IAC9B,UAAUlF,EAAUiF,CAAQ;AAAA;AAAA,EAAA;AAEpC,GAQA3B,IAAA,eAAA+C,KAAA,SAA0BvB,GAAYwB,GAAY;AAC9C,QAAMC,IAAMzB,EAAM,OAAO,WAAWwB,CAAK;AAEzC,SADexB,EAAM,MAAM,KAAKyB,GAAKzB,CAAK,KACzBA,EAAM,OAAO,cAAcwB,CAAK;AACrD,GAMA/C,IAAA,eAAA6B,cAAiBN,GAAY;AACzB,QAAMC,IAASD,EAAM,QACftC,IAAS,IAAK,OAAe,OAAO;AAAA,IACtCuC,EAAO,cAAc;AAAA,IACrBA,EAAO,eAAe;AAAA,EAAA;AACnB,SAAA7C,EAAA,MAAKoB,GAAA+C,IAAL,WAA+BvB,GAAOtC;AACjD,GAiCAgB,IAAA,eAAAmB,cAAU9B,GAAoB;AACpB,QAAAiC,IAAQjD,EAAA,MAAKiC,GAAQ,OACrBiB,IAASD,EAAM,QAEfO,IAASxC,EAAS,aAAakC,EAAO;AAC5C,EAAAD,EAAM,OAAO,QAAQ;AAAA,IACjB,aAAc,OAAe,OAAO,WAAW,YAAYjC,EAAS,WAAWA,EAAS,UAAUwC,CAAM;AAAA,EAAA,CAC3G;AACL,GAMA5B,IAAA,eAAAmB,cAAY/B,GAAoB;AACtB,QAAAiC,IAAQjD,EAAA,MAAKiC,GAAQ,OACrBiB,IAASD,EAAM,QACf0B,IAAQ3D,EAAS,SAAS,OAAOiC,EAAM,OAAO,QAAQ5E,EAAU2C,EAAS,OAAO,EAAE;AAEpF,MAAA4D,IAAW,KAAK,IAAID,CAAK;AAE7B,QAAMnB,IAASxC,EAAS,aAAakC,EAAO,cAAc,KAAK,IAAI0B,CAAQ,GAErE7D,IAAW,CAAC1C,EAAU2C,EAAS,QAAQ,GACvC6D,IAAe,OAAe,OAAO,WAAW,YAAY7D,EAAS,WAAWA,EAAS,UAAUwC,CAAM;AAC/G,EAAAP,EAAM,OAAO,QAAQ;AAAA,IACjB,aAAA4B;AAAA,IACA,aAAa;AAAA,MACT,SAAS9D;AAAA;AAAA,MACT,OAAA4D;AAAA;AAAA,MACA,MAAM;AAAA,IACV;AAAA,EAAA,CACH,GAED1B,EAAM,OAAO,SAASO,IAAS,KAAK,IAAIoB,CAAQ,CAAC;AACrD,GAMA/C,IAAA,eAAAgB,cAAU7B,GAAoB;AACpB,QAAAiC,IAAQjD,EAAA,MAAKiC,GAAQ,OACrBkB,IAAQ,IAAK,OAAe,OAAO,aAAa9E,EAAU2C,EAAS,SAAS,GAAG3C,EAAU2C,EAAS,QAAQ,CAAC;AACjH,MAAIiC,EAAM,OAAO;AACb,UAAMO,IAASP,EAAM,MAAM,UAAUE,CAAK;AAC1C,IAAAA,EAAM,SAASK,KAAU;AAAA;AAG7B,QAAMqB,IAAe,OAAe,OAAO,UAAU,MAAM,wBAAwB1B,CAAK,GAElFpC,IAAW,CAAC1C,EAAU2C,EAAS,QAAQ,GAEvC2D,IAAQ3D,EAAS,SAAS,OAAOhB,EAAA,MAAKqC,KAAW,OAAe,OAAO,KAAK,cAAchE,EAAU2C,EAAS,OAAO,EAAE,GACtH8D,IAAc;AAAA,IAChB,OAAAH;AAAA,IACA,SAAS5D;AAAA;AAAA,IACT,MAAM;AAAA;AAAA,EAAA;AAEV,EAAAkC,EAAM,OAAO,QAAQ;AAAA,IACjB,aAAA4B;AAAA,IACA,aAAAC;AAAA,EAAA,CACH;AACD,QAAMT,IAAWhE,EAAA,MAAK0B,IAAAgD,IAAL,WACb/D,EAAS,YAAY3C,EAAU2C,EAAS,QAAQ,GAChDiC;AAEJ,EAAAzC,EAAA,MAAK6B,GAAUsC,IAAS,OAAe,OAAO,KAAK,cAC7C1B,EAAA,OAAO,aAAaoB,CAAQ;AACtC,GAOAvC,IAAA,eAAAS,KAAA,SAAmByC,IAAwB,IAAO;AAC9C,QAAMC,IAAMjF,EAAA,MAAKmC,IACX+C,IAAUlF,EAAA,MAAKiC,GAAQ,OAAO;AAChC,GAAA,CAACgD,KAAO,CAAE,OAAe,OAAO,QAAQ,cAAcA,GAAKC,GAAS,IAAI,OACnE1E,EAAA,MAAA2B,GAAwB+C,EAAQ,UACjCF,MAAiB,MACjBhF,EAAA,MAAKR,GAAL,WAAsB;AAGlC,GAmBAuC,KAAA,eAAAgD,KAAA,SACIvG,GACA4E,GACAH,GAIM;AACN,QAAMC,IAASD,EAAM;AAEjB,MAAAkC,IADWlC,EAAM,OACH,QAAQ;AAC1B,UAAQ,OAAO,CAAC,MAAMkC,CAAI,CAAC;AAGrB,QAAAC,IAAkB5G,IAAa0E,EAAO,cAMtCmC,IAAwB,KAAK,IAAI,KAAK,IAAIjC,CAAQ,CAAC;AAiBlD,SAdegC,IAAkBC,IASE,IAAK,KAAK,IAAIF,IAAO,CAAC;AAMpE,GASAnD,KAAA,eAAAuC,KAAA,SACIF,GACAjB,GACAH,GAIM;AAEN,QAAMC,IAASD,EAAM;AAEjB,MAAAkC,IADWlC,EAAM,OACH,QAAQ,QAAQ;AAClC,UAAQ,OAAO,CAAC,MAAMkC,CAAI,CAAC;AAE3B,QAAMG,IAAgB,IAAIjB,IAAW,KAAK,IAAIc,IAAO,CAAC,GAChDE,IAAwB,KAAK,IAAI,KAAK,IAAIjC,CAAQ,CAAC;AAIlD,SAHiBkC,IAAgBD,IACHnC,EAAO;AAGhD;;ACraG,MAAMqC,GAAW;AAAA;AAAA,EAUpB,YAAY7E,GAA2B7B,GAAYC,GAA8B;AA0BjF;AAAA;AAAA;AAAA;AAAA,IAAAC,EAAA,MAAAC;AAuCA;AAAA;AAAA;AAAA,IAAAD,EAAA,MAAAyG;AA0CA;AAAA;AAAA;AAAA,IAAAzG,EAAA,MAAA0G;AApHA,IAAA1G,EAAA,MAAAI,GAAA;AACA,IAAAJ,EAAA,MAAAK,GAAA;AACA;AAAA,IAAAL,EAAA,MAAAM,IAAqB;AACrB;AAAA,IAAAN,EAAA,MAAA2G,GAA6B;AAC7B,IAAA3G,EAAA,MAAA4G,GAAwB;AACxB,IAAApG,EAAA,gBAAkB;AAClB,IAAAR,EAAA,MAAAS,GAAA;AAII,IAAAgB,EAAA,MAAKrB,GAAMN,IACX2B,EAAA,MAAKpB,GAAOsB,IACZF,EAAA,MAAKhB,GAAmBV,IAGxB0B,EAAA,MAAKmF,GAAmBjF,EAAK,MAAM,yBAAyB,CAACkF,MAAe;AAEpE,MAAA,CAACA,KAAS5F,EAAA,MAAK0F,MAGnBlF,EAAA,MAAKkF,GAAwBhF,EAAK,MAAM,aAAa,MAAM;AACvD,QAAAL,EAAA,MAAKrB,IAAAyB,IAAL;AAAA,MAAsB,CACzB;AAAA,IAAA,CACJ;AAAA,EACL;AAAA;AAAA,EAGA,IAAW,KAAa;AACpB,WAAOT,EAAA,MAAKb;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAiBA,IAAW,WAAiC;AACxC,UAAMuB,IAAOV,EAAA,MAAKZ;AACd,QAAA2B,GACA0C,IAAO;AACP,IAAApD,EAAA,MAAKmF,GAAAK,IAAL,WAAkBnF,MACPK,IAAA,CAACL,EAAK,OAAO,SACxB+C,IAAO/C,EAAK,OAAO,QAGnBK,IAAWL,EAAK;AAGd,UAAA2C,IAAY3C,EAAK,OAAO,aAAa,GACrC0C,IAAW1C,EAAK,OAAO,YAAY;AAElC,WAAA;AAAA,MACH,YAAYA,EAAK;AAAA;AAAA,MACjB,UAAAK;AAAA;AAAA,MACA,MAAA0C;AAAA;AAAA,MACA,WAAAJ;AAAA;AAAA,MACA,UAAAD;AAAA;AAAA,IAAA;AAAA,EAER;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,OAAOpC,GAAoB;AAC7B,QAAI,CAACA;AACD;AAEJ,IAAAX,EAAA,MAAKoF,GAAAK,IAAL;AAEA,UAAMpF,IAAOV,EAAA,MAAKZ,IAMZuB,IAAc;AAAA,MAChB,MAAM;AAAA;AAAA,MACN,WAAWK,EAAS;AAAA,MACpB,UAAUA,EAAS;AAAA,IAAA;AAGvB,IAAAN,EAAK,SAASC,GAGTD,EAAA,QAAQnC,GAAQyC,EAAS,UAAU,GAEpCX,EAAA,MAAKmF,GAAAK,IAAL,WAAkBnF,MACbA,EAAA,OAAO,UAAU,CAACM,EAAS,UAChCN,EAAK,OAAO,OAAOM,EAAS,QAAQN,EAAK,OAAO,QAGhDA,EAAK,WAAWM,EAAS;AAAA,EAEjC;AAAA;AAAA,EAaA,UAAU;;AACN,IAAAX,EAAA,MAAKoF,GAAAK,IAAL,aACAC,IAAA/F,EAAA,MAAK2F,OAAL,QAAAI,EAAuB,UACvBvF,EAAA,MAAKmF,GAAmB;AAAA,EAC5B;AACJ;AAjIIxG,IAAA,eACAC,IAAA,eACAC,KAAA,eACAqG,IAAA,eACAC,IAAA,eAEAnG,IAAA,eA6BAR,KAAA,eAAAyB,KAAmB,WAAA;AAEf,EAAI,CAAC,KAAK,UAAUT,EAAA,MAAKX,OAGzBW,EAAA,MAAKR,GAAL,WAAsB;AAC1B,GAiCAgG,IAAA,eAAAK,cAAanF,GAA8C;AACvD,SAAOA,EAAK,SAAS;AACzB,GAwCA+E,IAAA,eAAAK,KAAS,WAAA;;AACL,EAAI9F,EAAA,MAAK0F,QACLK,IAAA/F,EAAA,MAAK0F,OAAL,QAAAK,EAA4B,UAC5BvF,EAAA,MAAKkF,GAAwB;AAErC;;AChHG,MAAMM,GAAa;AAAA,EAKtB,YAAYC,GAAcC,GAAmB;AAiC7C;AAAA;AAAA;AAAA,IAAAnH,EAAA,MAAAoH;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAApH,EAAA,MAAAqH;AA/DA;AAAA,IAAArH,EAAA,MAAAsH,GAAmB,CAAA;AACnB,IAAAtH,EAAA,MAAAI,IAAc;AAWd;AAAA,IAAAJ,EAAA,MAAAuH,GAAmB;AAqEZ,IAAA/G,EAAA,kBAAW;AAAA,MACd,KAAK,CAAC4B,MAAiB;AACd,QAAAnB,EAAA,MAAAqG,GAAU,QAAQ,CAAQrD,MAAA;;AACrB,WAAA+C,IAAA/C,KAAA,gBAAAA,EAAA,aAAA,QAAA+C,EAAU,IAAI5E;AAAA,QAAO,CAC9B;AAAA,MACL;AAAA,MACA,QAAQ,CAACA,MAAiB;AACjB,QAAAnB,EAAA,MAAAqG,GAAU,QAAQ,CAAQrD,MAAA;;AACrB,WAAA+C,IAAA/C,KAAA,gBAAAA,EAAA,aAAA,QAAA+C,EAAU,OAAO5E;AAAA,QAAO,CACjC;AAAA,MACL;AAAA,MACA,WAAW,MAAM;AACR,QAAAnB,EAAA,MAAAqG,GAAU,QAAQ,CAAQrD,MAAA;;AAC3B,WAAA+C,IAAA/C,KAAA,gBAAAA,EAAM,aAAN,QAAA+C,EAAgB;AAAA,QAAU,CAC7B;AAAA,MACL;AAAA,IAAA;AA3FK,SAAA,UAASG,KAAA,gBAAAA,EAAS,WAAU,IACjCD,EAAM,QAAQ,CAAOrH,MAAA;AACjB,WAAK,OAAOA,CAAG;AAAA,IAAA,CAClB;AAAA,EACL;AAAA,EAIA,IAAW,OAAO2H,GAAiB;AAC3B,IAAAvG,EAAA,MAAKsG,OAAYC,KAGrB/F,EAAA,MAAK8F,GAAUC;AAAA,EACnB;AAAA,EACA,IAAW,SAAkB;AACzB,WAAOvG,EAAA,MAAKsG;AAAA,EAChB;AAAA;AAAA,EAIO,OAAO1H,GAAU;AACd,UAAA4H,IAAUnG,EAAA,MAAK+F,IAAAK,IAAL,WAAiB7H,IAC3BC,IAAK6H,GAAA,MAAKvH,IAAL,KAELwH,IAAU,IAAIH,EAAQ5H,GAAKC,GAAIwB,EAAA,MAAK8F,IAAAS,IAAW,KAAK,IAAI,CAAC;AAC1D,IAAA5G,EAAA,MAAAqG,GAAU,KAAKM,CAAO;AAAA,EAC/B;AAAA;AAAA,EAqBO,UAAU/H,GAAU;AACvB,IAAI,KAAK,WACLA,EAAI,qBAAqB;AAAA,EAEjC;AAAA;AAAA,EA4CO,UAAUuC,GAAc;AACtB,IAAAnB,EAAA,MAAAqG,GAAU,QAAQ,CAAQrD,MAAA;AAC3B,MAAAA,KAAA,QAAAA,EAAM,UAAU7B;AAAA,IAAO,CAC1B;AAAA,EACL;AAAA;AAAA,EAGO,YAAYA,GAAc;AACxB,IAAAnB,EAAA,MAAAqG,GAAU,QAAQ,CAAQrD,MAAA;AAC3B,MAAAA,KAAA,QAAAA,EAAM,YAAY7B;AAAA,IAAO,CAC5B;AAAA,EACL;AAAA,EAEO,eAAeA,GAAc;AAC3B,IAAAnB,EAAA,MAAAqG,GAAU,QAAQ,CAAQrD,MAAA;AAC3B,MAAAA,KAAA,QAAAA,EAAM,YAAY7B;AAAA,IAAO,CAC5B;AAAA,EACL;AAAA;AAIJ;AAzHIkF,IAAA,eACAlH,KAAA,eAWAmH,IAAA,eAwBAH,KAAA,eAAAS,cAAWC,GAAW;AACd,MAAA,CAAC,KAAK;AACN;AAEJ,QAAM7F,IAAqB6F,EAAK;AAChC,MAAI,CAAC7F;AACD;AAGJ,EADiBhB,EAAA,MAAKqG,GAAU,OAAO,OAAQrD,EAAK,OAAO6D,EAAK,EAAE,EACzD,QAAQ,CAAQ7D,MAAA;AACrB,IAAAA,KAAA,QAAAA,EAAM,OAAOhC;AAAA,EAAQ,CACxB;AACL,GAeAoF,KAAA,eAAAK,cAAY7H,GAAU;;AAClB,MAAIA,EAAI;AAEG,WAAAD;AACX,MACSC,EAAI;AAEF,WAAAwC;AACX,OACS2E,IAAAnH,EAAI,QAAJ,QAAAmH,EAAS;AAEP,WAAAR;AAGL,QAAA,IAAI,MAAM,qBAAqB;AACzC;"}