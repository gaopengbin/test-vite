{"version":3,"file":"sync.umd.cjs","sources":["../../../src/sync/utils/math.ts","../../../src/sync/maps/ol.ts","../../../src/sync/maps/cesium.ts","../../../src/sync/maps/arcgis.ts","../../../src/sync/synchronizer.ts"],"sourcesContent":["/**\n * 弧度转角度\n * @param {number} angleInRadians 弧度\n * @return {number} 角度\n */\nexport function toDegrees(angleInRadians: number): number {\n  return angleInRadians * 180 / Math.PI;\n}\n\n\n/**\n * 角度转弧度\n * @param {number} angleInDegrees 角度\n * @return {number} 弧度\n */\nexport function toRadians(angleInDegrees: number): number {\n  return angleInDegrees * Math.PI / 180;\n}\n\n/**\n * 根据分辨率获取比例尺\n * @param resolution 分辨率\n * @returns 比例尺\n */\nexport function toScale(resolution: number): number {\n  const DEFAULT_DPI = 25.4 / 0.28; // 默认dpi\n  const inchesPerMeter = 1000 / 25.4; // 英寸每米\n  return resolution * inchesPerMeter * DEFAULT_DPI;\n}\n","import { Feature, Map } from \"ol\";\r\nimport { ProjectionLike, transform } from \"ol/proj\";\r\nimport { unByKey } from 'ol/Observable.js';\r\nimport { SyncInfo } from \"../interface\";\r\nimport { toDegrees, toRadians } from \"../utils/math\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport { Polygon } from \"ol/geom\";\r\n\r\nexport class OlSync {\r\n    #id: number;\r\n    #map: Map;//地图\r\n    #updating: boolean = false; // 是否正在更新，正在更新的不需要触发视图更改事件\r\n    #handle: any = null;\r\n    enable: boolean = true;\r\n    // #toLonLat: any;\r\n    // #fromLonLat: any;\r\n    #updateOthersMap: Function; // 更新其他地图的方法\r\n    #mapPrj: ProjectionLike; // 当前map的投影\r\n    #syncPrj: ProjectionLike = 'EPSG:4326'; // 同步工具使用的投影\r\n\r\n\r\n    constructor(map: Map, id: number, updateOthersMapFun: Function) {\r\n        this.#id = id;\r\n        this.#map = map;\r\n        this.#updateOthersMap = updateOthersMapFun;\r\n        this.#handle = map.getView().on('propertychange', () => this.#handleViewEvent());\r\n        this.#mapPrj = this.#map.getView().getProjection();\r\n    }\r\n\r\n    // id不可更改\r\n    public get id(): number {\r\n        return this.#id;\r\n    }\r\n\r\n    /**\r\n     * 地图变更事件\r\n     * @returns \r\n     */\r\n    #handleViewEvent() {\r\n        // 禁用 或 排除因为别的地图引起的视图更改事件\r\n        if (!this.enable || this.#updating) {\r\n            return;\r\n        }\r\n        this.#updateOthersMap(this);\r\n    }\r\n\r\n    /**\r\n     * 获取当前位置信息\r\n     */\r\n    public get syncInfo(): SyncInfo | undefined {\r\n        const view = this.#map.getView();\r\n        if (!view) {\r\n            return;\r\n        }\r\n        const center = view.getCenter();\r\n        if (center === undefined || center === null) {\r\n            return;\r\n        }\r\n\r\n        let resolution = view.getResolution() || 1;\r\n        const metersPerUnit = view.getProjection().getMetersPerUnit() ?? 1;\r\n        resolution = resolution * metersPerUnit;\r\n\r\n        // const lonLat = this.#toLonLat(center, undefined, undefined);\r\n        const lonLat = transform(center, this.#mapPrj, this.#syncPrj);\r\n        // console.assert(lonLat); // 断言\r\n\r\n        const rotation = toDegrees(view.getRotation());\r\n        return {\r\n            resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation, // 旋转\r\n            tilt: null,//倾斜角度 ol没有该参数\r\n            longitude: lonLat[0], // 中心经度\r\n            latitude: lonLat[1], // 中心纬度\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新地图\r\n     */\r\n    update(syncInfo: SyncInfo) {\r\n        if (!syncInfo) {\r\n            return;\r\n        }\r\n        this.#updating = true;\r\n\r\n        const view = this.#map.getView();\r\n        let metersPerUnit = view.getProjection().getMetersPerUnit() ?? 1; //每单位米数\r\n        const center = transform([syncInfo.longitude, syncInfo.latitude], this.#syncPrj, this.#mapPrj);\r\n        // view.setCenter(this.#fromLonLat([syncInfo.longitude, syncInfo.latitude]));\r\n        view.setCenter(center);\r\n\r\n        const resolution = syncInfo.resolution / metersPerUnit;\r\n        const currentResolution = view.getResolution() || 1;\r\n\r\n        // 当分辨率改变大于1/100时，再进行设置，防止卡帧\r\n        if ((Math.abs(resolution - currentResolution) / currentResolution) > 0.01) {\r\n            view.setResolution(resolution);\r\n        }\r\n\r\n        // 当旋转角度改变的弧度大于0.01时，再进行设置，防止卡帧\r\n        const rotation = toRadians(syncInfo.rotation);\r\n        if (Math.abs(rotation - view.getRotation()) > 0.01) {\r\n            view.setRotation(rotation);\r\n        }\r\n\r\n        this.#updating = false;\r\n    }\r\n\r\n    // graphic对象，用于添加或删除graphic\r\n    public graphics = {\r\n        // 添加 直接结构参数\r\n        add: ({ geometry, symbol }: any) => {\r\n            console.log(geometry);\r\n            console.log(symbol);\r\n\r\n            let feature = new Feature({\r\n                // geometry: new Polygon([[\r\n                //     [117, 45],\r\n                //     [118, 45],\r\n                //     [118, 46],\r\n                //     [117, 45],\r\n                //     [117, 45]\r\n                // ]]).transform(this.#syncPrj, this.#mapPrj)\r\n                geometry: new Polygon(geometry).transform(this.#syncPrj, this.#mapPrj),\r\n                symbol: symbol\r\n            });\r\n\r\n\r\n\r\n            const source = new VectorSource();\r\n            const vector = new VectorLayer({\r\n                source: source,\r\n                style: {\r\n                    'fill-color': 'rgba(255, 255, 255, 0.2)',\r\n                    'stroke-color': '#ffcc33',\r\n                    'stroke-width': 2,\r\n                    'circle-radius': 7,\r\n                    'circle-fill-color': '#ffcc33',\r\n                },\r\n            });\r\n            this.#map.addLayer(vector);\r\n            source.addFeature(feature);\r\n        },\r\n        remove: this.#remove,\r\n        removeAll: this.#removeAll\r\n    }\r\n\r\n    // 移除\r\n    #remove(graphic: any) {\r\n        console.log(graphic);\r\n    }\r\n\r\n    // 移除全部\r\n    #removeAll() {\r\n\r\n    }\r\n\r\n    // 销毁对象\r\n    destroy() {\r\n        unByKey(this.#handle);\r\n        this.#handle = null;\r\n    }\r\n}","// import * as Cesium from 'cesium';\r\nimport { SyncInfo } from \"../interface\";\r\nimport { toDegrees, toRadians } from '../utils/math';\r\n\r\n// let Cesium: any = (window as any).Cesium;\r\n\r\nexport class CesiumSync {\r\n    #id: number;\r\n    #viewer: any;//地图\r\n    #handles: any[] = [];\r\n    enable: boolean = true;\r\n    #lastCameraViewMatrix: any;\r\n    #canRender: boolean = false; // 可以开始渲染\r\n    #updateOthersMap: Function; // 更新其他地图的方法\r\n    #tilt3d: number = 0; // 记录视角的角度\r\n    // #dataSource: (window as any).Cesium.GeoJsonDataSource;\r\n\r\n    constructor(viewer: any, id: number, updateOthersMapFun: Function) {\r\n        this.#id = id;\r\n        this.#viewer = viewer;\r\n        this.#updateOthersMap = updateOthersMapFun;\r\n        // this.#dataSource = new (window as any).Cesium.GeoJsonDataSource();\r\n        /**\r\n         * 获取将在场景更新之后和场景呈现之前引发的事件 用该事件替换 requestAnimationFrame\r\n         * viewer.camera.changed 该方式不够灵敏 右键缩放经常不被识别\r\n         */\r\n        let handle1 = viewer.scene.preRender.addEventListener(() => {\r\n            this.#canRender && this.#checkCameraChange();\r\n        });\r\n        let handle2 = viewer.camera.moveStart.addEventListener(() => {\r\n            // 只有enable 为true时才能同步\r\n            this.#canRender = this.enable\r\n        });\r\n        let handle3 = viewer.camera.moveEnd.addEventListener(() => {\r\n            this.#canRender = false;\r\n        });\r\n        this.#handles = [\r\n            handle1,\r\n            handle2,\r\n            handle3\r\n        ];\r\n    }\r\n\r\n    // id不可更改\r\n    public get id(): number {\r\n        return this.#id;\r\n    }\r\n\r\n    // /**\r\n    //  * 更新其他地图，该方法需要被重写\r\n    //  */\r\n    // updateOthersMap(sync: any) {\r\n    //     console.log(sync);\r\n    // }\r\n\r\n    /**\r\n     * 获取当前位置信息\r\n     */\r\n    public get syncInfo(): SyncInfo | undefined {\r\n        // 三维模式\r\n        if (this.#viewer.scene.mode === (window as any).Cesium.SceneMode.SCENE3D) {\r\n            return this.#get3dSyncInfo();\r\n        }\r\n        // 二维模式\r\n        else if (this.#viewer.scene.mode === (window as any).Cesium.SceneMode.SCENE2D) {\r\n            return this.#get2dSyncInfo();\r\n        }\r\n        // 2.5维模式\r\n        else if (this.#viewer.scene.mode === (window as any).Cesium.SceneMode.COLUMBUS_VIEW) {\r\n            return this.#get2_5dSyncInfo();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 获取 2d 位置信息\r\n     * @returns \r\n     */\r\n    #get2dSyncInfo(): SyncInfo | undefined {\r\n        const scene = this.#viewer.scene;\r\n        const canvas = scene.canvas;\r\n        // 获取坐标 (弧度制)\r\n        const carto = scene.camera.positionCartographic;\r\n        const latitude = carto?.latitude || 0;\r\n        const longitude = carto?.longitude || 0;\r\n        // cesium 2d模式 是正交投影，所以用横向分辨率确定高度\r\n        const resolution = carto.height / canvas.clientWidth;\r\n        return {\r\n            resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation: 0, // 旋转\r\n            tilt: 0,//倾斜角度\r\n            longitude: toDegrees(longitude), // 中心经度 角度制\r\n            latitude: toDegrees(latitude), // 中心纬度 角度制\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取 2.5d 位置信息\r\n     * @returns \r\n     */\r\n    #get2_5dSyncInfo(): SyncInfo | undefined {\r\n        const scene = this.#viewer.scene;\r\n        const canvas = scene.canvas;\r\n        // 获取屏幕中心点的3D位置\r\n        const target = this.#pickCenterPoint(scene);\r\n        let carto;\r\n        if (!target) {\r\n            // 获取坐标 (弧度制)\r\n            carto = scene.camera.positionCartographic;\r\n        } else {\r\n            // 笛卡尔空间直角坐标系转换为WGS84\r\n            carto = (window as any).Cesium.Cartographic.fromCartesian(target);\r\n        }\r\n\r\n        let height = scene.camera.positionCartographic.height;\r\n        // 计算真实的高度\r\n        height = height / Math.sin(Math.abs(scene.camera.pitch));\r\n        const latitude = carto?.latitude || 0;\r\n        const longitude = carto?.longitude || 0;\r\n        // cesium 2.5d模式 用横向分辨率确定高度\r\n        const resolution = height / canvas.clientWidth;\r\n\r\n        const tilt = scene.camera.pitch + (window as any).Cesium.Math.PI_OVER_TWO;\r\n        return {\r\n            resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation: -toDegrees(scene.camera.heading), // 旋转\r\n            tilt: toDegrees(tilt),//倾斜角度\r\n            longitude: toDegrees(longitude), // 中心经度 角度制\r\n            latitude: toDegrees(latitude), // 中心纬度 角度制\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取 3d 位置信息\r\n     * @returns \r\n     */\r\n    #get3dSyncInfo(): SyncInfo | undefined {\r\n        const scene = this.#viewer.scene;\r\n        // 目标和距离\r\n        const ellipsoid = (window as any).Cesium.Ellipsoid.WGS84;\r\n        // 获取屏幕中心点的3D位置\r\n        const target = this.#pickCenterPoint(scene);\r\n        let rotation; // 当前位置的旋转角度\r\n        let tilt;// 当前位置的倾斜角度\r\n        let bestTarget = target;\r\n        if (!bestTarget) {\r\n\r\n            const globe = scene.globe;\r\n            const carto = scene.camera.positionCartographic.clone();\r\n            const height = globe.getHeight(carto);\r\n            carto.height = height || 0;\r\n            bestTarget = (window as any).Cesium.Ellipsoid.WGS84.cartographicToCartesian(carto);\r\n            rotation = scene.camera.heading;\r\n\r\n            tilt = scene.camera.pitch + (window as any).Cesium.Math.PI_OVER_TWO;\r\n        }\r\n        else {\r\n            // HEADING\r\n            const up = scene.camera.up;\r\n            const right = scene.camera.right;\r\n            const normal = new (window as any).Cesium.Cartesian3(-bestTarget.y, bestTarget.x, 0); // what is it?\r\n            const heading = (window as any).Cesium.Cartesian3.angleBetween(right, normal);\r\n            const cross = (window as any).Cesium.Cartesian3.cross(bestTarget, up, new (window as any).Cesium.Cartesian3());\r\n            const orientation = cross.z;\r\n            rotation = (orientation < 0 ? heading : -heading);\r\n\r\n\r\n            const pos = scene.camera.position;\r\n\r\n            // 垂直于目标处的椭球\r\n            const targetNormal = new (window as any).Cesium.Cartesian3();\r\n            ellipsoid.geocentricSurfaceNormal(bestTarget, targetNormal);\r\n\r\n            // 从目标到摄像机的矢量\r\n            const targetToCamera = new (window as any).Cesium.Cartesian3();\r\n            (window as any).Cesium.Cartesian3.subtract(pos, bestTarget, targetToCamera);\r\n            (window as any).Cesium.Cartesian3.normalize(targetToCamera, targetToCamera);\r\n            const tiltAngle = Math.acos((window as any).Cesium.Cartesian3.dot(targetNormal, targetToCamera));\r\n            tilt = isNaN(tiltAngle) ? 0 : tiltAngle;\r\n        }\r\n\r\n        const distance = (window as any).Cesium.Cartesian3.distance(bestTarget, scene.camera.position);\r\n        const bestTargetCartographic = ellipsoid.cartesianToCartographic(bestTarget);\r\n\r\n        // resolution\r\n        const latitude = bestTargetCartographic?.latitude || 0;\r\n        const longitude = bestTargetCartographic?.longitude || 0;\r\n        const resolution = this.#calcResolutionForDistance(distance, latitude, scene);\r\n\r\n        this.#tilt3d = tilt;\r\n        return {\r\n            resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation: toDegrees(rotation), // 旋转\r\n            tilt: toDegrees(tilt),//倾斜角度\r\n            longitude: toDegrees(longitude), // 中心经度 角度制\r\n            latitude: toDegrees(latitude), // 中心纬度 角度制\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取画布给定像素的3D位置\r\n     * @param scene \r\n     * @param pixel \r\n     * @returns \r\n     */\r\n    #pickOnTerrainOrEllipsoid(scene: any, pixel: any) {\r\n        const ray = scene.camera.getPickRay(pixel);\r\n        const target = scene.globe.pick(ray, scene);\r\n        return target || scene.camera.pickEllipsoid(pixel);\r\n    };\r\n    /**\r\n     * 获取屏幕中心点的3D位置\r\n     * @param scene \r\n     * @returns \r\n     */\r\n    #pickCenterPoint(scene: any) {\r\n        const canvas = scene.canvas;\r\n        const center = new (window as any).Cesium.Cartesian2(\r\n            canvas.clientWidth / 2,\r\n            canvas.clientHeight / 2);\r\n        return this.#pickOnTerrainOrEllipsoid(scene, center);\r\n    };\r\n\r\n    /**\r\n     * 更新地图\r\n     */\r\n    update(syncInfo: SyncInfo) {\r\n        if (!syncInfo) {\r\n            return;\r\n        }\r\n\r\n        switch (this.#viewer.scene.mode) {\r\n            case (window as any).Cesium.SceneMode.SCENE3D:\r\n                this.#update3d(syncInfo);\r\n                break;\r\n            case (window as any).Cesium.SceneMode.SCENE2D:\r\n                this.#update2d(syncInfo);\r\n                break;\r\n            case (window as any).Cesium.SceneMode.COLUMBUS_VIEW:\r\n                this.#update2_5d(syncInfo);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // 记录相机状态\r\n        this.#checkCameraChange(true);\r\n    }\r\n\r\n\r\n    /**\r\n     * 更新2D地图\r\n     * @param syncInfo \r\n     */\r\n    #update2d(syncInfo: SyncInfo) {\r\n        const scene = this.#viewer.scene;\r\n        const canvas = scene.canvas;\r\n        // cesium 2d模式 是正交投影，所以用横向分辨率确定高度\r\n        const height = syncInfo.resolution * canvas.clientWidth;\r\n        scene.camera.setView({\r\n            destination: (window as any).Cesium.Cartesian3.fromDegrees(syncInfo.longitude, syncInfo.latitude, height)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 更新2.5D地图\r\n     * @param syncInfo \r\n     */\r\n    #update2_5d(syncInfo: SyncInfo) {\r\n        const scene = this.#viewer.scene;\r\n        const canvas = scene.canvas;\r\n        const pitch = syncInfo.tilt === null ? scene.camera.pitch : toRadians(syncInfo.tilt - 90);\r\n\r\n        let absPitch = Math.abs(pitch); // 俯仰角的绝对值\r\n        // cesium 2.5d模式 用横向分辨率确定高度\r\n        const height = syncInfo.resolution * canvas.clientWidth / Math.sin(absPitch);\r\n        // const tilt = syncInfo.tilt ?? 0;\r\n        const rotation = -toRadians(syncInfo.rotation);\r\n        const destination = (window as any).Cesium.Cartesian3.fromDegrees(syncInfo.longitude, syncInfo.latitude, height);\r\n        scene.camera.setView({\r\n            destination,\r\n            orientation: {\r\n                heading: rotation,// 朝向\r\n                pitch,// 俯仰\r\n                roll: undefined\r\n            }\r\n        });\r\n        // 平移相机\r\n        scene.camera.moveDown(height * Math.cos(absPitch));\r\n    }\r\n\r\n    /**\r\n     * 更新三维地图\r\n     * @param syncInfo \r\n     */\r\n    #update3d(syncInfo: SyncInfo) {\r\n        const scene = this.#viewer.scene;\r\n        const carto = new (window as any).Cesium.Cartographic(toRadians(syncInfo.longitude), toRadians(syncInfo.latitude));\r\n        if (scene.globe) {\r\n            const height = scene.globe.getHeight(carto);\r\n            carto.height = height || 0;\r\n        }\r\n\r\n        const destination = (window as any).Cesium.Ellipsoid.WGS84.cartographicToCartesian(carto);\r\n\r\n        const rotation = -toRadians(syncInfo.rotation);\r\n\r\n        const pitch = syncInfo.tilt === null ? this.#tilt3d - (window as any).Cesium.Math.PI_OVER_TWO : toRadians(syncInfo.tilt - 90);\r\n        const orientation = {\r\n            pitch,\r\n            heading: rotation, // 朝向\r\n            roll: undefined // 翻滚\r\n        };\r\n        scene.camera.setView({\r\n            destination,\r\n            orientation\r\n        });\r\n        const distance = this.#calcDistanceForResolution(\r\n            syncInfo.resolution, toRadians(syncInfo.latitude),\r\n            scene\r\n        );\r\n        this.#tilt3d = pitch + (window as any).Cesium.Math.PI_OVER_TWO;\r\n        scene.camera.moveBackward(distance);\r\n    }\r\n\r\n    /**\r\n     * 检查基础相机状态是否已更改，如果更改则并同步\r\n     * 检查完成后需要记录相机状态\r\n     * @param {boolean=} opt_dontSync 不要同步视图,只需要记录当前状态\r\n     */\r\n    #checkCameraChange(opt_dontSync: boolean = false) {\r\n        const old = this.#lastCameraViewMatrix;\r\n        const current = this.#viewer.camera.viewMatrix;\r\n        if (!old || !(window as any).Cesium.Matrix4.equalsEpsilon(old, current, 1e-5)) {\r\n            this.#lastCameraViewMatrix = current.clone();\r\n            if (opt_dontSync !== true) {\r\n                this.#updateOthersMap(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 销毁对象\r\n    destroy() {\r\n        this.#handles.forEach(item => {\r\n            item();\r\n        });\r\n        this.#handles = [];\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据分辨率和纬度值计算摄像机和中心点之间的距离\r\n     * @param resolution \r\n     * @param latitude 弧度制\r\n     * @param scene \r\n     * @param metersPerUnit \r\n     * @returns \r\n     */\r\n    #calcDistanceForResolution(\r\n        resolution: number,\r\n        latitude: number,\r\n        scene: {\r\n            canvas: any;\r\n            camera: any;\r\n        }\r\n    ): number {\r\n        const canvas = scene.canvas;\r\n        const camera = scene.camera;\r\n        let fovy = camera.frustum.fovy; // vertical field of view\r\n        console.assert(!isNaN(fovy));\r\n\r\n        // number of \"map units\" visible in 2D (vertically)\r\n        const visibleMapUnits = resolution * canvas.clientHeight;\r\n\r\n        // The metersPerUnit does not take latitude into account, but it should\r\n        // be lower with increasing latitude -- we have to compensate.\r\n        // In 3D it is not possible to maintain the resolution at more than one point,\r\n        // so it only makes sense to use the latitude of the \"target\" point.\r\n        const relativeCircumference = Math.cos(Math.abs(latitude));\r\n\r\n        // how many meters should be visible in 3D\r\n        const visibleMeters = visibleMapUnits * relativeCircumference;\r\n\r\n        // distance required to view the calculated length in meters\r\n        //\r\n        //  fovy/2\r\n        //    |\\\r\n        //  x | \\\r\n        //    |--\\\r\n        // visibleMeters/2\r\n        const requiredDistance = (visibleMeters / 2) / Math.tan(fovy / 2);\r\n\r\n        // NOTE: This calculation is not absolutely precise, because metersPerUnit\r\n        // is a great simplification. It does not take ellipsoid/terrain into account.\r\n\r\n        return requiredDistance;\r\n    }\r\n    /**\r\n     * 根据距离（相机到位置）和纬度值计算分辨率\r\n     * @param distance \r\n     * @param latitude 弧度制\r\n     * @param scene \r\n     * @param metersPerUnit \r\n     * @returns \r\n     */\r\n    #calcResolutionForDistance(\r\n        distance: number,\r\n        latitude: number,\r\n        scene: {\r\n            canvas: any;\r\n            camera: any;\r\n        }\r\n    ): number {\r\n        // See the reverse calculation (calcDistanceForResolution) for details\r\n        const canvas = scene.canvas;\r\n        const camera = scene.camera;\r\n        let fovy = camera.frustum.fovy || 1; // vertical field of view\r\n        console.assert(!isNaN(fovy));\r\n\r\n        const visibleMeters = 2 * distance * Math.tan(fovy / 2);\r\n        const relativeCircumference = Math.cos(Math.abs(latitude));\r\n        const visibleMapUnits = visibleMeters / relativeCircumference;\r\n        const resolution = visibleMapUnits / canvas.clientHeight;\r\n\r\n        return resolution;\r\n    }\r\n}","import SceneView from \"@arcgis/core/views/SceneView\";\r\nimport MapView from \"@arcgis/core/views/MapView\";\r\nimport { SyncInfo } from \"../interface\";\r\nimport { toScale } from \"../utils/math\";\r\n\r\nexport class ArcgisSync {\r\n    #id: number;\r\n    #map: MapView | SceneView;//地图\r\n    #updating: boolean = false; // 是否正在更新，正在更新的不需要触发视图更改事件\r\n    #viewpointWatchHandle: any = null;\r\n    #interactWatcher: any = null;\r\n    enable: boolean = true;\r\n    #updateOthersMap: Function; // 更新其他地图的方法\r\n\r\n\r\n    constructor(view: MapView | SceneView, id: number, updateOthersMapFun: Function) {\r\n        this.#id = id;\r\n        this.#map = view;\r\n        this.#updateOthersMap = updateOthersMapFun;\r\n\r\n        // 监视交互和动画\r\n        this.#interactWatcher = view.watch(\"interacting,animation\", (value: any) => {\r\n            // 不需要重复监听\r\n            if (!value || this.#viewpointWatchHandle) {\r\n                return;\r\n            }\r\n            this.#viewpointWatchHandle = view.watch(\"viewpoint\", () => {\r\n                this.#handleViewEvent();\r\n            });\r\n        });\r\n    }\r\n\r\n    // id不可更改\r\n    public get id(): number {\r\n        return this.#id;\r\n    }\r\n\r\n    /**\r\n     * 地图变更事件\r\n     * @returns \r\n     */\r\n    #handleViewEvent() {\r\n        // 禁用 或 排除因为别的地图引起的视图更改事件\r\n        if (!this.enable || this.#updating) {\r\n            return;\r\n        }\r\n        this.#updateOthersMap(this);\r\n    }\r\n\r\n    /**\r\n     * 获取当前位置信息\r\n     */\r\n    public get syncInfo(): SyncInfo | undefined {\r\n        const view = this.#map;\r\n        let rotation;\r\n        let tilt = null;\r\n        if (this.#isSceneView(view)) {\r\n            rotation = -view.camera.heading;\r\n            tilt = view.camera.tilt;\r\n        }\r\n        else {\r\n            rotation = view.rotation;\r\n        }\r\n\r\n        const longitude = view.center.longitude || 0;\r\n        const latitude = view.center.latitude || 0;\r\n\r\n        return {\r\n            resolution: view.resolution, // 当每单位米数为1时的地图分辨率\r\n            rotation, // 旋转\r\n            tilt,//倾斜角度 2d没有该参数\r\n            longitude, // 中心经度\r\n            latitude, // 中心纬度\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 判断是否为SceneView\r\n     */\r\n    #isSceneView(view: MapView | SceneView): view is SceneView {\r\n        return view.type === '3d';\r\n    }\r\n\r\n    /**\r\n     * 更新地图\r\n     */\r\n    async update(syncInfo: SyncInfo) {\r\n        if (!syncInfo) {\r\n            return;\r\n        }\r\n        this.#clear(); // 移除监听\r\n\r\n        const view = this.#map;\r\n        // 尽量不使用new 避免打包\r\n        // const center = new Point({\r\n        //     longitude: syncInfo.longitude,\r\n        //     latitude: syncInfo.latitude\r\n        // });\r\n        const center: any = {\r\n            type: \"point\", // autocasts as new Point()\r\n            longitude: syncInfo.longitude,\r\n            latitude: syncInfo.latitude\r\n        };\r\n\r\n        view.center = center;\r\n        // view.scale = view.scale / view.resolution * syncInfo.resolution;\r\n\r\n        view.scale = toScale(syncInfo.resolution);// arcgis 2d模式下因为存在lod，可能不一致\r\n\r\n        if (this.#isSceneView(view)) {\r\n            view.camera.heading = -syncInfo.rotation;\r\n            view.camera.tilt = syncInfo.tilt ?? view.camera.tilt;\r\n        }\r\n        else {\r\n            view.rotation = syncInfo.rotation;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除监听\r\n     */\r\n    #clear() {\r\n        if (this.#viewpointWatchHandle) {\r\n            this.#viewpointWatchHandle?.remove();\r\n            this.#viewpointWatchHandle = null;\r\n        }\r\n    }\r\n\r\n    // 销毁对象\r\n    destroy() {\r\n        this.#clear();\r\n        this.#interactWatcher?.remove();\r\n        this.#interactWatcher = null;\r\n    }\r\n}","import { OlSync } from \"./maps/ol\";\r\nimport { CesiumSync } from \"./maps/cesium\";\r\nimport { ArcgisSync } from \"./maps/arcgis\";\r\nimport { SyncInfo } from \"./interface\";\r\n\r\n/** 参数 */\r\ninterface Options {\r\n    // 是否启用同步\r\n    enable: boolean,\r\n    // 是否同步切片\r\n    // 是否同步矢量\r\n}\r\n\r\n\r\n// openlayers 与 cesium 的同步器\r\nexport class Synchronizer {\r\n    // [x: string]: any; // 任意的string索引List\r\n    #mapSyncs: any[] = [];\r\n    #id: number = 1;\r\n\r\n    constructor(_maps: any[], options?: Options) {\r\n        // 添加默认参数\r\n        this.enable = options?.enable ?? true;\r\n        _maps.forEach(map => {\r\n            this.addMap(map);\r\n        })\r\n    }\r\n\r\n    //是否启用同步\r\n    #enable: boolean = false;\r\n    public set enable(enable: boolean) {\r\n        if (this.#enable === enable) {\r\n            return;\r\n        }\r\n        this.#enable = enable;\r\n    }\r\n    public get enable(): boolean {\r\n        return this.#enable;\r\n    }\r\n\r\n\r\n    // 添加地图\r\n    public addMap(map: any) {\r\n        const MapSync = this.#getMapSync(map);\r\n        const id = this.#id++;\r\n        // 添加到同步\r\n        const mapSync = new MapSync(map, id, this.#updateAll.bind(this));\r\n        this.#mapSyncs.push(mapSync);\r\n    }\r\n\r\n    /**\r\n     * 更新除发出事件的所有其他的地图\r\n     */\r\n    #updateAll(sync: any) {\r\n        if (!this.enable) {\r\n            return;\r\n        }\r\n        const syncInfo: SyncInfo = sync.syncInfo;\r\n        if (!syncInfo) {\r\n            return;\r\n        }\r\n        const mapSyncs = this.#mapSyncs.filter(item => item.id !== sync.id);\r\n        mapSyncs.forEach(item => {\r\n            item?.update(syncInfo);\r\n        });\r\n    }\r\n\r\n\r\n    // 删除地图\r\n    public removeMap(map: any) {\r\n        if (this.enable) {\r\n            map.enableSynchronizer = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取地图同步器的构造函数\r\n     * @param map \r\n     * @returns \r\n     */\r\n    #getMapSync(map: any) {\r\n        if (map.ol_uid) {\r\n            /** ol相关方法 */\r\n            return OlSync;\r\n        }\r\n        else if (map.cesiumWidget) {\r\n            /** cesium 相关方法 */\r\n            return CesiumSync;\r\n        }\r\n        else if (map.map?.basemap) {\r\n            /** arcgis 相关方法 */\r\n            return ArcgisSync;\r\n        }\r\n\r\n        throw new Error(\"cannot get map type\");\r\n    }\r\n\r\n\r\n    public graphics = {\r\n        add: (graphic: any) => {\r\n            this.#mapSyncs.forEach(item => {\r\n                item?.graphics?.add(graphic);\r\n            });\r\n        },\r\n        remove: (graphic: any) => {\r\n            this.#mapSyncs.forEach(item => {\r\n                item?.graphics?.remove(graphic);\r\n            });\r\n        },\r\n        removeAll: () => {\r\n            this.#mapSyncs.forEach(item => {\r\n                item?.graphics?.removeAll();\r\n            });\r\n        },\r\n    }\r\n\r\n    // 高亮\r\n    public highlight(graphic: any) {\r\n        this.#mapSyncs.forEach(item => {\r\n            item?.highlight(graphic);\r\n        });\r\n    }\r\n\r\n    // 移除高亮\r\n    public unhighlight(graphic: any) {\r\n        this.#mapSyncs.forEach(item => {\r\n            item?.unhighlight(graphic);\r\n        });\r\n    }\r\n\r\n    public unHighlightAll(graphic: any) {\r\n        this.#mapSyncs.forEach(item => {\r\n            item?.unhighlight(graphic);\r\n        });\r\n    }\r\n\r\n    // 移除全部高亮\r\n\r\n}\r\n\r\n"],"names":["toDegrees","angleInRadians","toRadians","angleInDegrees","toScale","resolution","DEFAULT_DPI","inchesPerMeter","OlSync","map","id","updateOthersMapFun","__privateAdd","_handleViewEvent","_remove","_removeAll","_id","_map","_updating","_handle","__publicField","_updateOthersMap","_mapPrj","_syncPrj","geometry","symbol","feature","Feature","Polygon","__privateGet","source","VectorSource","vector","VectorLayer","__privateMethod","remove_fn","removeAll_fn","__privateSet","handleViewEvent_fn","view","center","metersPerUnit","lonLat","transform","rotation","syncInfo","currentResolution","unByKey","graphic","CesiumSync","viewer","_get2dSyncInfo","_get2_5dSyncInfo","_get3dSyncInfo","_pickOnTerrainOrEllipsoid","_pickCenterPoint","_update2d","_update2_5d","_update3d","_checkCameraChange","_calcDistanceForResolution","_calcResolutionForDistance","_viewer","_handles","_lastCameraViewMatrix","_canRender","_tilt3d","handle1","checkCameraChange_fn","handle2","handle3","get3dSyncInfo_fn","get2dSyncInfo_fn","get2_5dSyncInfo_fn","update3d_fn","update2d_fn","update2_5d_fn","item","scene","canvas","carto","latitude","longitude","target","pickCenterPoint_fn","height","tilt","ellipsoid","bestTarget","up","right","normal","heading","pos","targetNormal","targetToCamera","tiltAngle","globe","distance","bestTargetCartographic","calcResolutionForDistance_fn","pickOnTerrainOrEllipsoid_fn","pixel","ray","pitch","absPitch","destination","orientation","calcDistanceForResolution_fn","opt_dontSync","old","current","fovy","visibleMapUnits","relativeCircumference","visibleMeters","ArcgisSync","_isSceneView","_clear","_viewpointWatchHandle","_interactWatcher","value","isSceneView_fn","clear_fn","_a","Synchronizer","_maps","options","_updateAll","_getMapSync","_mapSyncs","_enable","enable","MapSync","getMapSync_fn","__privateWrapper","mapSync","updateAll_fn","sync"],"mappings":"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"}